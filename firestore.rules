rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(projectId, userId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.members[userId] == 'owner';
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /projects/{projectId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.members;

      allow create: if request.auth != null &&
                      (request.resource.data.parentProjectId == null ||
                       get(/databases/$(database)/documents/projects/$(request.resource.data.parentProjectId)).data.members[request.auth.uid] in ['owner', 'editor']);

      allow update: if request.auth != null &&
                      (resource.data.members[request.auth.uid] == 'owner' ||
                       (resource.data.members[request.auth.uid] == 'editor' && !('members' in request.resource.data.diff(resource.data).affectedKeys())));

      allow delete: if request.auth != null && isOwner(projectId, request.auth.uid);
    }

    match /tasks/{taskId} {
      allow read, update, delete: if request.auth != null &&
                                    get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.members[request.auth.uid] in ['owner', 'editor', 'viewer'];

      allow create: if request.auth != null &&
                      get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.members[request.auth.uid] in ['owner', 'editor'];
    }

    match /task_statuses/{statusId} {
      allow read, write: if request.auth != null;
    }
  }
}
