generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  password            String
  name                String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  failedLoginAttempts Int             @default(0)
  lastFailedAttempt   DateTime?
  lockedUntil         DateTime?
  lockoutReason       String?
  isManuallyLocked    Boolean         @default(false)
  role                String          @default("user")
  isDisabled          Boolean         @default(false)
  projects            Project[]       @relation("owner_projects")
  projectMembers      ProjectMember[]
  assignedTasks       Task[]
  taskComments        TaskComment[]
}

model Project {
  id              String          @id @default(uuid())
  name            String
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  ownerId         String
  parentProjectId String?
  owner           User            @relation("owner_projects", fields: [ownerId], references: [id])
  parentProject   Project?        @relation("ProjectChildren", fields: [parentProjectId], references: [id])
  subProjects     Project[]       @relation("ProjectChildren")
  members         ProjectMember[]
  tasks           Task[]
  statuses        TaskStatus[]
}

model ProjectMember {
  id        String  @id @default(uuid())
  projectId String
  userId    String
  role      String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model TaskStatus {
  id                String        @id @default(uuid())
  label             String
  showStrikeThrough Boolean       @default(false)
  color             String?
  order             Int           @default(0)
  hidden            Boolean       @default(false)
  requiresComment   Boolean       @default(false)
  allowsComment     Boolean       @default(true)
  projectId         String
  tasks             Task[]
  comments          TaskComment[]
  project           Project       @relation(fields: [projectId], references: [id])
}

model Task {
  id          String        @id @default(uuid())
  title       String
  description String?
  projectId   String
  parentId    String?
  statusId    String?
  assigneeId  String?
  dueTime     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  priority    String        @default("medium")
  assignee    User?         @relation(fields: [assigneeId], references: [id])
  parent      Task?         @relation("TaskChildren", fields: [parentId], references: [id])
  children    Task[]        @relation("TaskChildren")
  project     Project       @relation(fields: [projectId], references: [id])
  status      TaskStatus?   @relation(fields: [statusId], references: [id])
  comments    TaskComment[]
}

model TaskComment {
  id        String      @id @default(uuid())
  content   String
  taskId    String
  authorId  String
  statusId  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  author    User        @relation(fields: [authorId], references: [id])
  status    TaskStatus? @relation(fields: [statusId], references: [id])
  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
