datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // For same-server deployment, directUrl is optional but can help with connection pooling
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user") // user, admin, superuser
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Account lockout fields
  failedLoginAttempts Int       @default(0)
  lastFailedAttempt   DateTime?
  lockedUntil         DateTime?
  lockoutReason       String?
  isManuallyLocked    Boolean   @default(false)
  
  // Account status fields
  isDisabled          Boolean   @default(false)
  
  projects            Project[] @relation("owner_projects")
  projectMembers      ProjectMember[]
  assignedTasks       Task[]
  taskComments        TaskComment[]
}

model Project {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownerId     String
  owner       User         @relation("owner_projects", fields: [ownerId], references: [id])
  parentProjectId String?
  parentProject   Project?  @relation("ProjectChildren", fields: [parentProjectId], references: [id])
  subProjects     Project[] @relation("ProjectChildren")
  members     ProjectMember[]
  statuses    TaskStatus[]
  tasks       Task[]
}

model ProjectMember {
  id        String  @id @default(uuid())
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  role      String
}

model TaskStatus {
  id        String  @id @default(uuid())
  label     String
  showStrikeThrough Boolean @default(false)
  color     String?
  order     Int     @default(0)
  hidden    Boolean @default(false)
  requiresComment Boolean @default(false)
  allowsComment Boolean @default(true)
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  tasks     Task[]
  comments  TaskComment[]
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  priority    String   @default("normal") // low, normal, high, urgent
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  parentId    String?
  parent      Task?    @relation("TaskChildren", fields: [parentId], references: [id])
  children    Task[]   @relation("TaskChildren")
  statusId    String?
  status      TaskStatus? @relation(fields: [statusId], references: [id])
  assigneeId  String?
  assignee    User?    @relation(fields: [assigneeId], references: [id])
  dueTime     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    TaskComment[]
}

model TaskComment {
  id        String   @id @default(uuid())
  content   String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  statusId  String?  // The status this comment was made when moving to
  status    TaskStatus? @relation(fields: [statusId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
