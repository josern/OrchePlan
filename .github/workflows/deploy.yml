name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orcheplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level=high
        cd ../frontend && npm audit --audit-level=high
    
    - name: Generate Prisma client
      run: cd backend && npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orcheplan_test
    
    - name: Run database migrations
      run: cd backend && npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orcheplan_test
    
    - name: Run backend tests
      run: cd backend && npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orcheplan_test
        JWT_SECRET: test-secret-for-ci-only
    
    - name: Build frontend
      run: cd frontend && npm run build
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1
    
    - name: Run frontend tests
      run: cd frontend && npm test
      env:
        NODE_ENV: test

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Generate Prisma client
      run: cd backend && npx prisma generate
    
    - name: Build backend
      run: cd backend && npm run build
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Create deployment archive
      run: |
        tar -czf orcheplan-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.next' \
          --exclude='dist' \
          backend/ frontend/ scripts/ ecosystem.config.js nginx.conf package.json
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: orcheplan-build
        path: orcheplan-${{ github.sha }}.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: orcheplan-build
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_SSH_PORT }}
        script: |
          # Create deployment directory
          mkdir -p /tmp/orcheplan-deploy
          
    - name: Copy deployment files
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_SSH_PORT }}
        source: "orcheplan-${{ github.sha }}.tar.gz"
        target: "/tmp/orcheplan-deploy/"
    
    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_SSH_PORT }}
        script: |
          cd /tmp/orcheplan-deploy
          
          # Backup current deployment
          sudo -u orcheplan cp -r /opt/orcheplan/current /opt/orcheplan/backup-$(date +%Y%m%d-%H%M%S)
          
          # Extract new version
          tar -xzf orcheplan-${{ github.sha }}.tar.gz
          
          # Deploy new version
          sudo -u orcheplan cp -r * /opt/orcheplan/current/
          
          # Install dependencies
          cd /opt/orcheplan/current
          sudo -u orcheplan npm install --production
          
          # Build applications
          sudo -u orcheplan npm run build
          
          # Run database migrations
          cd /opt/orcheplan/current/backend
          sudo -u orcheplan npm run migrate:deploy
          
          # Restart PM2 services
          sudo -u orcheplan pm2 restart all
          
          # Wait for services to start
          sleep 10
          
          # Health check
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/api/health
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/health
          
          # Cleanup
          rm -rf /tmp/orcheplan-deploy
    
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          OrchePlan deployment to production: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}