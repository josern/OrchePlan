name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]

env:
  NODE_VERSION: '18'

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Lint backend
      run: cd backend && npm run lint || echo "No lint script found"
    
    - name: Lint frontend
      run: cd frontend && npm run lint
    
    - name: Type check frontend
      run: cd frontend && npm run typecheck

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orcheplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Generate Prisma client
      run: cd backend && npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orcheplan_test
    
    - name: Run database migrations
      run: cd backend && npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orcheplan_test
    
    - name: Run backend tests
      run: cd backend && npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orcheplan_test
        JWT_SECRET: test-secret-for-ci-only
    
    - name: Run frontend tests
      run: cd frontend && npm test
      env:
        NODE_ENV: test

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

  build:
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Build backend
      run: cd backend && npm run build
    
    - name: Build frontend
      run: cd frontend && npm run build
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1
    
    - name: Test Docker builds
      run: |
        docker build -f backend/Dockerfile.prod backend/
        docker build -f frontend/Dockerfile.prod frontend/

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orcheplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Install Playwright
      run: cd frontend && npx playwright install --with-deps
    
    - name: Setup test environment
      run: |
        cd backend
        npx prisma generate
        npx prisma migrate deploy
        npm run create-superuser
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orcheplan_test
        JWT_SECRET: test-secret-for-ci-only
        NODE_ENV: test
    
    - name: Start backend server
      run: cd backend && npm run dev &
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/orcheplan_test
        JWT_SECRET: test-secret-for-ci-only
        PORT: 3000
    
    - name: Start frontend server
      run: cd frontend && npm run dev &
      env:
        NODE_ENV: development
        NEXT_PUBLIC_API_URL: http://localhost:3000
        PORT: 3001
    
    - name: Wait for servers to start
      run: |
        npx wait-on http://localhost:3000/health
        npx wait-on http://localhost:3001
    
    - name: Run Playwright tests
      run: cd frontend && npx playwright test
    
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30