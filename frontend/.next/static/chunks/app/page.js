/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/../node_modules/lucide-react/dist/esm/Icon.js":
/*!*****************************************************!*\
  !*** ../node_modules/lucide-react/dist/esm/Icon.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Icon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultAttributes.js */ \"(app-pages-browser)/../node_modules/lucide-react/dist/esm/defaultAttributes.js\");\n/* harmony import */ var _shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/src/utils.js */ \"(app-pages-browser)/../node_modules/lucide-react/dist/esm/shared/src/utils.js\");\n/**\n * @license lucide-react v0.475.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \n\n\nconst Icon = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(_c = (param, ref)=>{\n    let { color = \"currentColor\", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = \"\", children, iconNode, ...rest } = param;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"svg\", {\n        ref,\n        ..._defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n        className: (0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeClasses)(\"lucide\", className),\n        ...rest\n    }, [\n        ...iconNode.map((param)=>{\n            let [tag, attrs] = param;\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(tag, attrs);\n        }),\n        ...Array.isArray(children) ? children : [\n            children\n        ]\n    ]);\n});\n_c1 = Icon;\n //# sourceMappingURL=Icon.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Icon$forwardRef\");\n$RefreshReg$(_c1, \"Icon\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL0ljb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLENBQU0sU0FBTyx3RUFDWCxRQVdFLEdBQ0c7UUFYSCxFQUNFLEtBQVEsbUJBQ1IsSUFBTyxPQUNQLFdBQWMsTUFDZCxxQkFDQSxTQUFZLE9BQ1osVUFDQSxVQUNBLEdBQUc7SUFJRSwyRUFDTCxNQUNBO1FBQ0U7UUFDQSxHQUFHO1FBQ0gsS0FBTztRQUNQLE1BQVE7UUFDUixNQUFRO1FBQ1IsWUFBYSxxQkFBdUIsUUFBTyxFQUFXLFlBQUksSUFBTSxVQUFPLENBQUksSUFBSTtRQUMvRSxVQUFXLG1FQUFhLFdBQVUsU0FBUztRQUMzQyxHQUFHO0lBQ0wsR0FDQTtXQUNLLENBQVMsWUFBSTtnQkFBQyxDQUFDLENBQUssS0FBSyxLQUFNO2lDQUFBLHFEQUFjLEdBQUssT0FBSyxDQUFDOztXQUN2RCxLQUFNLFNBQVEsUUFBUSxDQUFJLGNBQVc7WUFBQyxRQUFRO1NBQUE7S0FDcEQ7QUFFSiIsInNvdXJjZXMiOlsiL2hvbWUvY29kZXIvc3JjL0ljb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBkZWZhdWx0QXR0cmlidXRlcyBmcm9tICcuL2RlZmF1bHRBdHRyaWJ1dGVzJztcbmltcG9ydCB7IEljb25Ob2RlLCBMdWNpZGVQcm9wcyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgbWVyZ2VDbGFzc2VzIH0gZnJvbSAnQGx1Y2lkZS9zaGFyZWQnO1xuXG5pbnRlcmZhY2UgSWNvbkNvbXBvbmVudFByb3BzIGV4dGVuZHMgTHVjaWRlUHJvcHMge1xuICBpY29uTm9kZTogSWNvbk5vZGU7XG59XG5cbi8qKlxuICogTHVjaWRlIGljb24gY29tcG9uZW50XG4gKlxuICogQGNvbXBvbmVudCBJY29uXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wcy5jb2xvciAtIFRoZSBjb2xvciBvZiB0aGUgaWNvblxuICogQHBhcmFtIHtudW1iZXJ9IHByb3BzLnNpemUgLSBUaGUgc2l6ZSBvZiB0aGUgaWNvblxuICogQHBhcmFtIHtudW1iZXJ9IHByb3BzLnN0cm9rZVdpZHRoIC0gVGhlIHN0cm9rZSB3aWR0aCBvZiB0aGUgaWNvblxuICogQHBhcmFtIHtib29sZWFufSBwcm9wcy5hYnNvbHV0ZVN0cm9rZVdpZHRoIC0gV2hldGhlciB0byB1c2UgYWJzb2x1dGUgc3Ryb2tlIHdpZHRoXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcHMuY2xhc3NOYW1lIC0gVGhlIGNsYXNzIG5hbWUgb2YgdGhlIGljb25cbiAqIEBwYXJhbSB7SWNvbk5vZGV9IHByb3BzLmNoaWxkcmVuIC0gVGhlIGNoaWxkcmVuIG9mIHRoZSBpY29uXG4gKiBAcGFyYW0ge0ljb25Ob2RlfSBwcm9wcy5pY29uTm9kZSAtIFRoZSBpY29uIG5vZGUgb2YgdGhlIGljb25cbiAqXG4gKiBAcmV0dXJucyB7Rm9yd2FyZFJlZkV4b3RpY0NvbXBvbmVudH0gTHVjaWRlSWNvblxuICovXG5jb25zdCBJY29uID0gZm9yd2FyZFJlZjxTVkdTVkdFbGVtZW50LCBJY29uQ29tcG9uZW50UHJvcHM+KFxuICAoXG4gICAge1xuICAgICAgY29sb3IgPSAnY3VycmVudENvbG9yJyxcbiAgICAgIHNpemUgPSAyNCxcbiAgICAgIHN0cm9rZVdpZHRoID0gMixcbiAgICAgIGFic29sdXRlU3Ryb2tlV2lkdGgsXG4gICAgICBjbGFzc05hbWUgPSAnJyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaWNvbk5vZGUsXG4gICAgICAuLi5yZXN0XG4gICAgfSxcbiAgICByZWYsXG4gICkgPT4ge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFxuICAgICAgJ3N2ZycsXG4gICAgICB7XG4gICAgICAgIHJlZixcbiAgICAgICAgLi4uZGVmYXVsdEF0dHJpYnV0ZXMsXG4gICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgIHN0cm9rZTogY29sb3IsXG4gICAgICAgIHN0cm9rZVdpZHRoOiBhYnNvbHV0ZVN0cm9rZVdpZHRoID8gKE51bWJlcihzdHJva2VXaWR0aCkgKiAyNCkgLyBOdW1iZXIoc2l6ZSkgOiBzdHJva2VXaWR0aCxcbiAgICAgICAgY2xhc3NOYW1lOiBtZXJnZUNsYXNzZXMoJ2x1Y2lkZScsIGNsYXNzTmFtZSksXG4gICAgICAgIC4uLnJlc3QsXG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICAuLi5pY29uTm9kZS5tYXAoKFt0YWcsIGF0dHJzXSkgPT4gY3JlYXRlRWxlbWVudCh0YWcsIGF0dHJzKSksXG4gICAgICAgIC4uLihBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogW2NoaWxkcmVuXSksXG4gICAgICBdLFxuICAgICk7XG4gIH0sXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBJY29uO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/lucide-react/dist/esm/Icon.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/lucide-react/dist/esm/createLucideIcon.js":
/*!*****************************************************************!*\
  !*** ../node_modules/lucide-react/dist/esm/createLucideIcon.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createLucideIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/src/utils.js */ \"(app-pages-browser)/../node_modules/lucide-react/dist/esm/shared/src/utils.js\");\n/* harmony import */ var _Icon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Icon.js */ \"(app-pages-browser)/../node_modules/lucide-react/dist/esm/Icon.js\");\n/**\n * @license lucide-react v0.475.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \n\n\nconst createLucideIcon = (iconName, iconNode)=>{\n    const Component = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((param, ref)=>{\n        let { className, ...props } = param;\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(_Icon_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n            ref,\n            iconNode,\n            className: (0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.mergeClasses)(\"lucide-\".concat((0,_shared_src_utils_js__WEBPACK_IMPORTED_MODULE_2__.toKebabCase)(iconName)), className),\n            ...props\n        });\n    });\n    Component.displayName = \"\".concat(iconName);\n    return Component;\n};\n //# sourceMappingURL=createLucideIcon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2NyZWF0ZUx1Y2lkZUljb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBV00sdUJBQW1CLEdBQUMsVUFBa0IsUUFBdUI7SUFDakUsTUFBTSxDQUFZLG1GQUFpRTtZQUF6QixFQUFFLENBQVcsV0FBRyxRQUFTOzZCQUNqRixvREFBYSxDQUFDLGdEQUFNO1lBQ2xCO1lBQ0E7WUFDQSxXQUFXLGtFQUFhLFdBQStCLE9BQXJCLGlFQUFXLENBQUMsUUFBUSxDQUFDLEdBQUksU0FBUztZQUNwRSxHQUFHO1FBQUEsQ0FDSjs7SUFHTyx3QkFBYyxDQUFHLEVBQVEsT0FBUixRQUFRO0lBRTVCO0FBQ1QiLCJzb3VyY2VzIjpbIi9ob21lL2NvZGVyL3NyYy9jcmVhdGVMdWNpZGVJY29uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtZXJnZUNsYXNzZXMsIHRvS2ViYWJDYXNlIH0gZnJvbSAnQGx1Y2lkZS9zaGFyZWQnO1xuaW1wb3J0IHsgSWNvbk5vZGUsIEx1Y2lkZVByb3BzIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgSWNvbiBmcm9tICcuL0ljb24nO1xuXG4vKipcbiAqIENyZWF0ZSBhIEx1Y2lkZSBpY29uIGNvbXBvbmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGljb25OYW1lXG4gKiBAcGFyYW0ge2FycmF5fSBpY29uTm9kZVxuICogQHJldHVybnMge0ZvcndhcmRSZWZFeG90aWNDb21wb25lbnR9IEx1Y2lkZUljb25cbiAqL1xuY29uc3QgY3JlYXRlTHVjaWRlSWNvbiA9IChpY29uTmFtZTogc3RyaW5nLCBpY29uTm9kZTogSWNvbk5vZGUpID0+IHtcbiAgY29uc3QgQ29tcG9uZW50ID0gZm9yd2FyZFJlZjxTVkdTVkdFbGVtZW50LCBMdWNpZGVQcm9wcz4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+XG4gICAgY3JlYXRlRWxlbWVudChJY29uLCB7XG4gICAgICByZWYsXG4gICAgICBpY29uTm9kZSxcbiAgICAgIGNsYXNzTmFtZTogbWVyZ2VDbGFzc2VzKGBsdWNpZGUtJHt0b0tlYmFiQ2FzZShpY29uTmFtZSl9YCwgY2xhc3NOYW1lKSxcbiAgICAgIC4uLnByb3BzLFxuICAgIH0pLFxuICApO1xuXG4gIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGAke2ljb25OYW1lfWA7XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUx1Y2lkZUljb247XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/lucide-react/dist/esm/createLucideIcon.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/lucide-react/dist/esm/defaultAttributes.js":
/*!******************************************************************!*\
  !*** ../node_modules/lucide-react/dist/esm/defaultAttributes.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ defaultAttributes)\n/* harmony export */ });\n/**\n * @license lucide-react v0.475.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ var defaultAttributes = {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n};\n //# sourceMappingURL=defaultAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2RlZmF1bHRBdHRyaWJ1dGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztJQUFBLENBQWU7SUFDYixLQUFPO0lBQ1AsS0FBTztJQUNQLE1BQVE7SUFDUixPQUFTO0lBQ1QsSUFBTTtJQUNOLE1BQVE7SUFDUixXQUFhO0lBQ2IsYUFBZTtJQUNmLGNBQWdCO0FBQ2xCIiwic291cmNlcyI6WyIvaG9tZS9jb2Rlci9zcmMvZGVmYXVsdEF0dHJpYnV0ZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICB4bWxuczogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgd2lkdGg6IDI0LFxuICBoZWlnaHQ6IDI0LFxuICB2aWV3Qm94OiAnMCAwIDI0IDI0JyxcbiAgZmlsbDogJ25vbmUnLFxuICBzdHJva2U6ICdjdXJyZW50Q29sb3InLFxuICBzdHJva2VXaWR0aDogMixcbiAgc3Ryb2tlTGluZWNhcDogJ3JvdW5kJyxcbiAgc3Ryb2tlTGluZWpvaW46ICdyb3VuZCcsXG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/lucide-react/dist/esm/defaultAttributes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/lucide-react/dist/esm/icons/loader-circle.js":
/*!********************************************************************!*\
  !*** ../node_modules/lucide-react/dist/esm/icons/loader-circle.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __iconNode: () => (/* binding */ __iconNode),\n/* harmony export */   \"default\": () => (/* binding */ LoaderCircle)\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/../node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.475.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst __iconNode = [\n    [\n        \"path\",\n        {\n            d: \"M21 12a9 9 0 1 1-6.219-8.56\",\n            key: \"13zald\"\n        }\n    ]\n];\nconst LoaderCircle = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"LoaderCircle\", __iconNode);\n //# sourceMappingURL=loader-circle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL2xvYWRlci1jaXJjbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBR2EsaUJBQXVCO0lBQUM7UUFBQyxNQUFRO1FBQUEsQ0FBRTtZQUFBLEVBQUcsOEJBQStCO1lBQUEsS0FBSyxDQUFTO1FBQUEsQ0FBQztLQUFDO0NBQUE7QUFhNUYsbUJBQWUsa0VBQWlCLGlCQUFnQixDQUFVIiwic291cmNlcyI6WyIvaG9tZS9zcmMvaWNvbnMvbG9hZGVyLWNpcmNsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uJztcbmltcG9ydCB7IEljb25Ob2RlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgX19pY29uTm9kZTogSWNvbk5vZGUgPSBbWydwYXRoJywgeyBkOiAnTTIxIDEyYTkgOSAwIDEgMS02LjIxOS04LjU2Jywga2V5OiAnMTN6YWxkJyB9XV07XG5cbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBMb2FkZXJDaXJjbGVcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKTk1qRWdNVEpoT1NBNUlEQWdNU0F4TFRZdU1qRTVMVGd1TlRZaUlDOCtDand2YzNablBnbz0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2xvYWRlci1jaXJjbGVcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBMb2FkZXJDaXJjbGUgPSBjcmVhdGVMdWNpZGVJY29uKCdMb2FkZXJDaXJjbGUnLCBfX2ljb25Ob2RlKTtcblxuZXhwb3J0IGRlZmF1bHQgTG9hZGVyQ2lyY2xlO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/lucide-react/dist/esm/icons/loader-circle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/lucide-react/dist/esm/shared/src/utils.js":
/*!*****************************************************************!*\
  !*** ../node_modules/lucide-react/dist/esm/shared/src/utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeClasses: () => (/* binding */ mergeClasses),\n/* harmony export */   toKebabCase: () => (/* binding */ toKebabCase)\n/* harmony export */ });\n/**\n * @license lucide-react v0.475.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const toKebabCase = (string)=>string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst mergeClasses = function() {\n    for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n        classes[_key] = arguments[_key];\n    }\n    return classes.filter((className, index, array)=>{\n        return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index;\n    }).join(\" \").trim();\n};\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL3NoYXJlZC9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQVFhLG9CQUFjLENBQUMsTUFDMUIsVUFBTyxRQUFRLG9CQUFzQixTQUFPLEVBQUUsV0FBWTtBQStCL0MsbUJBQWUsSUFBMkM7O1FBQUEsT0FDckU7O1dBQUEsUUFDRyxPQUFPLENBQUMsV0FBVyxPQUFPLEtBQVU7UUFFakMsZUFBUSxTQUFTLEVBQ2hCLFlBQXFCLFlBQVcsQ0FDakMsV0FBTSxPQUFRLEVBQVMsU0FBTTtJQUVqQyxDQUFDLENBQ0EsTUFBSyxDQUFHLElBQ1IsQ0FBSyIsInNvdXJjZXMiOlsiL3NoYXJlZC9zcmMvdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FtZWxUb1Bhc2NhbCB9IGZyb20gJy4vdXRpbGl0eS10eXBlcyc7XG5cbi8qKlxuICogQ29udmVydHMgc3RyaW5nIHRvIGtlYmFiIGNhc2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIGtlYmFiaXplZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IHRvS2ViYWJDYXNlID0gKHN0cmluZzogc3RyaW5nKSA9PlxuICBzdHJpbmcucmVwbGFjZSgvKFthLXowLTldKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gY2FtZWwgY2FzZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgY2FtZWxpemVkIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgdG9DYW1lbENhc2UgPSA8VCBleHRlbmRzIHN0cmluZz4oc3RyaW5nOiBUKSA9PlxuICBzdHJpbmcucmVwbGFjZSgvXihbQS1aXSl8W1xccy1fXSsoXFx3KS9nLCAobWF0Y2gsIHAxLCBwMikgPT5cbiAgICBwMiA/IHAyLnRvVXBwZXJDYXNlKCkgOiBwMS50b0xvd2VyQ2FzZSgpLFxuICApO1xuXG4vKipcbiAqIENvbnZlcnRzIHN0cmluZyB0byBwYXNjYWwgY2FzZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgcGFzY2FsaXplZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IHRvUGFzY2FsQ2FzZSA9IDxUIGV4dGVuZHMgc3RyaW5nPihzdHJpbmc6IFQpOiBDYW1lbFRvUGFzY2FsPFQ+ID0+IHtcbiAgY29uc3QgY2FtZWxDYXNlID0gdG9DYW1lbENhc2Uoc3RyaW5nKTtcblxuICByZXR1cm4gKGNhbWVsQ2FzZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhbWVsQ2FzZS5zbGljZSgxKSkgYXMgQ2FtZWxUb1Bhc2NhbDxUPjtcbn07XG5cbi8qKlxuICogTWVyZ2VzIGNsYXNzZXMgaW50byBhIHNpbmdsZSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBjbGFzc2VzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyBvZiBjbGFzc2VzXG4gKi9cbmV4cG9ydCBjb25zdCBtZXJnZUNsYXNzZXMgPSA8Q2xhc3NUeXBlID0gc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbD4oLi4uY2xhc3NlczogQ2xhc3NUeXBlW10pID0+XG4gIGNsYXNzZXNcbiAgICAuZmlsdGVyKChjbGFzc05hbWUsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgQm9vbGVhbihjbGFzc05hbWUpICYmXG4gICAgICAgIChjbGFzc05hbWUgYXMgc3RyaW5nKS50cmltKCkgIT09ICcnICYmXG4gICAgICAgIGFycmF5LmluZGV4T2YoY2xhc3NOYW1lKSA9PT0gaW5kZXhcbiAgICAgICk7XG4gICAgfSlcbiAgICAuam9pbignICcpXG4gICAgLnRyaW0oKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/lucide-react/dist/esm/shared/src/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/next/dist/api/navigation.js":
/*!***************************************************!*\
  !*** ../node_modules/next/dist/api/navigation.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client/components/navigation */ \"(app-pages-browser)/../node_modules/next/dist/client/components/navigation.js\");\n/* harmony import */ var _client_components_navigation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_client_components_navigation__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n//# sourceMappingURL=navigation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2FwaS9uYXZpZ2F0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDs7QUFFaEQiLCJzb3VyY2VzIjpbIi9ob21lL2NvZGVyL09yY2hlUGxhbi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2FwaS9uYXZpZ2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2NsaWVudC9jb21wb25lbnRzL25hdmlnYXRpb24nO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYXZpZ2F0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/next/dist/api/navigation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fcoder%2FOrchePlan%2Ffrontend%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fcoder%2FOrchePlan%2Ffrontend%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(app-pages-browser)/./src/app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRmhvbWUlMkZjb2RlciUyRk9yY2hlUGxhbiUyRmZyb250ZW5kJTJGc3JjJTJGYXBwJTJGcGFnZS50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSw4SkFBb0YiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9ob21lL2NvZGVyL09yY2hlUGxhbi9mcm9udGVuZC9zcmMvYXBwL3BhZ2UudHN4XCIpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fcoder%2FOrchePlan%2Ffrontend%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n        case REACT_ACTIVITY_TYPE:\n          return \"Activity\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_PORTAL_TYPE:\n            return \"Portal\";\n          case REACT_CONTEXT_TYPE:\n            return type.displayName || \"Context\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function UnknownOwner() {\n      return Error(\"react-stack-top-frame\");\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(type, key, props, owner, debugStack, debugTask) {\n      var refProp = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== refProp ? refProp : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        maybeKey,\n        getOwner(),\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\"),\n      REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          };\n    React = {\n      react_stack_bottom_frame: function (callStackForError) {\n        return callStackForError();\n      }\n    };\n    var specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(\n      React,\n      UnknownOwner\n    )();\n    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (type, config, maybeKey, isStaticChildren) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        isStaticChildren,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!*******************************************************************!*\
  !*** ../node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsK0xBQXNFO0FBQ3hFIiwic291cmNlcyI6WyIvaG9tZS9jb2Rlci9PcmNoZVBsYW4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RootPage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/../node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _context_app_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/context/app-context */ \"(app-pages-browser)/./src/context/app-context.tsx\");\n/* harmony import */ var _barrel_optimize_names_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Loader2!=!lucide-react */ \"(app-pages-browser)/../node_modules/lucide-react/dist/esm/icons/loader-circle.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction RootPage() {\n    _s();\n    const { currentUser, loading } = (0,_context_app_context__WEBPACK_IMPORTED_MODULE_3__.useApp)();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"RootPage.useEffect\": ()=>{\n            if (!loading) {\n                if (currentUser) {\n                    router.replace('/dashboard');\n                } else {\n                    router.replace('/login');\n                }\n            }\n        }\n    }[\"RootPage.useEffect\"], [\n        currentUser,\n        loading,\n        router\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex h-screen items-center justify-center\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Loader2_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n            className: \"h-8 w-8 animate-spin\"\n        }, void 0, false, {\n            fileName: \"/home/coder/OrchePlan/frontend/src/app/page.tsx\",\n            lineNumber: 24,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/home/coder/OrchePlan/frontend/src/app/page.tsx\",\n        lineNumber: 23,\n        columnNumber: 5\n    }, this);\n}\n_s(RootPage, \"MZ80Zrk+647IDsRvLOaw3J1haJI=\", false, function() {\n    return [\n        _context_app_context__WEBPACK_IMPORTED_MODULE_3__.useApp,\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = RootPage;\nvar _c;\n$RefreshReg$(_c, \"RootPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvcGFnZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRWtDO0FBQ1U7QUFDRztBQUNSO0FBRXhCLFNBQVNJOztJQUN0QixNQUFNLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxFQUFFLEdBQUdKLDREQUFNQTtJQUN2QyxNQUFNSyxTQUFTTiwwREFBU0E7SUFFeEJELGdEQUFTQTs4QkFBQztZQUNSLElBQUksQ0FBQ00sU0FBUztnQkFDWixJQUFJRCxhQUFhO29CQUNmRSxPQUFPQyxPQUFPLENBQUM7Z0JBQ2pCLE9BQU87b0JBQ0xELE9BQU9DLE9BQU8sQ0FBQztnQkFDakI7WUFDRjtRQUNGOzZCQUFHO1FBQUNIO1FBQWFDO1FBQVNDO0tBQU87SUFFakMscUJBQ0UsOERBQUNFO1FBQUlDLFdBQVU7a0JBQ2IsNEVBQUNQLG1GQUFPQTtZQUFDTyxXQUFVOzs7Ozs7Ozs7OztBQUd6QjtHQW5Cd0JOOztRQUNXRix3REFBTUE7UUFDeEJELHNEQUFTQTs7O0tBRkZHIiwic291cmNlcyI6WyIvaG9tZS9jb2Rlci9PcmNoZVBsYW4vZnJvbnRlbmQvc3JjL2FwcC9wYWdlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG5pbXBvcnQgeyB1c2VBcHAgfSBmcm9tICdAL2NvbnRleHQvYXBwLWNvbnRleHQnO1xuaW1wb3J0IHsgTG9hZGVyMiB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvb3RQYWdlKCkge1xuICBjb25zdCB7IGN1cnJlbnRVc2VyLCBsb2FkaW5nIH0gPSB1c2VBcHAoKTtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWxvYWRpbmcpIHtcbiAgICAgIGlmIChjdXJyZW50VXNlcikge1xuICAgICAgICByb3V0ZXIucmVwbGFjZSgnL2Rhc2hib2FyZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm91dGVyLnJlcGxhY2UoJy9sb2dpbicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2N1cnJlbnRVc2VyLCBsb2FkaW5nLCByb3V0ZXJdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBoLXNjcmVlbiBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgIDxMb2FkZXIyIGNsYXNzTmFtZT1cImgtOCB3LTggYW5pbWF0ZS1zcGluXCIgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VSb3V0ZXIiLCJ1c2VBcHAiLCJMb2FkZXIyIiwiUm9vdFBhZ2UiLCJjdXJyZW50VXNlciIsImxvYWRpbmciLCJyb3V0ZXIiLCJyZXBsYWNlIiwiZGl2IiwiY2xhc3NOYW1lIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/context/app-context.tsx":
/*!*************************************!*\
  !*** ./src/context/app-context.tsx ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppProvider: () => (/* binding */ AppProvider),\n/* harmony export */   useApp: () => (/* binding */ useApp)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/api */ \"(app-pages-browser)/./src/lib/api.ts\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/../node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _lib_realtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/realtime */ \"(app-pages-browser)/./src/lib/realtime.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/logger */ \"(app-pages-browser)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_cached_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/cached-api */ \"(app-pages-browser)/./src/lib/cached-api.ts\");\n/* __next_internal_client_entry_do_not_use__ AppProvider,useApp auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\nconst AppContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst logger = (0,_lib_logger__WEBPACK_IMPORTED_MODULE_5__.createComponentLogger)('AppContext');\nfunction AppProvider(param) {\n    let { children } = param;\n    _s();\n    const [users, setUsers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [projects, setProjects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [tasks, setTasks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentUser, setCurrentUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [isKanbanHeaderVisible, setIsKanbanHeaderVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [isSidebarOpenByDefault, setIsSidebarOpenByDefault] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [cardDensity, setCardDensityState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('comfortable');\n    const [defaultView, setDefaultViewState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('board');\n    const [groupByStatus, setGroupByStatusState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    const pathname = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.usePathname)();\n    // Debounced task updates for drag operations\n    const pendingTaskUpdates = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const updateTaskTimeouts = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    // Realtime client for SSE updates\n    const realtimeClient = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isRealtimeConnected, setIsRealtimeConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // normalize a single project object from backend into frontend shape\n    const normalizeProject = (p)=>{\n        if (!p) return p;\n        const taskStatusOptions = Array.isArray(p.statuses) ? p.statuses.map((s)=>{\n            const label = (s.label || '').toString();\n            // fallback color map when DB doesn't have a color\n            const fallback = (()=>{\n                const key = label.trim().toLowerCase();\n                if (key === 'to-do' || key === 'todo' || key === 'to do') return '#3B82F6';\n                if (key === 'in progress' || key === 'in-progress') return '#EAB308';\n                if (key === 'done') return '#22C55E';\n                if (key === 'remove' || key === 'removed' || key === 'archive') return '#EF4444';\n                return '#E5E7EB';\n            })();\n            return {\n                id: s.id,\n                name: s.label,\n                color: s.color || fallback,\n                order: s.order,\n                showStrikeThrough: s.showStrikeThrough || false,\n                hidden: s.hidden || false,\n                requiresComment: s.requiresComment || false,\n                allowsComment: s.allowsComment || false\n            };\n        }) : [];\n        // normalize members array -> map if needed\n        if (Array.isArray(p.members)) {\n            const map = {};\n            p.members.forEach((m)=>{\n                if (m && m.userId && m.role) map[m.userId] = m.role;\n            });\n            return {\n                ...p,\n                members: map,\n                taskStatusOptions\n            };\n        }\n        return {\n            ...p,\n            members: p.members || {},\n            taskStatusOptions\n        };\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppProvider.useEffect\": ()=>{\n            var _document_cookie_split_find;\n            const cookieValue = (_document_cookie_split_find = document.cookie.split('; ').find({\n                \"AppProvider.useEffect\": (row)=>row.startsWith('sidebar_default_open=')\n            }[\"AppProvider.useEffect\"])) === null || _document_cookie_split_find === void 0 ? void 0 : _document_cookie_split_find.split('=')[1];\n            if (cookieValue) {\n                setIsSidebarOpenByDefault(cookieValue === 'true');\n            }\n        }\n    }[\"AppProvider.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppProvider.useEffect\": ()=>{\n            try {\n                const stored = window.localStorage.getItem('card_density');\n                if (stored === 'compact' || stored === 'comfortable') setCardDensityState(stored);\n                const dv = window.localStorage.getItem('default_view');\n                if (dv === 'board' || dv === 'list') setDefaultViewState(dv);\n                const gb = window.localStorage.getItem('group_by_status');\n                if (gb === 'true' || gb === 'false') setGroupByStatusState(gb === 'true');\n            } catch (e) {\n            // ignore\n            }\n        }\n    }[\"AppProvider.useEffect\"], []);\n    const toggleSidebarDefault = ()=>{\n        setIsSidebarOpenByDefault((prevState)=>{\n            const newState = !prevState;\n            document.cookie = \"sidebar_default_open=\".concat(newState, \";path=/;max-age=31536000\"); // Expires in 1 year\n            return newState;\n        });\n    };\n    const setCardDensity = (d)=>{\n        setCardDensityState(d);\n        try {\n            window.localStorage.setItem('card_density', d);\n        } catch (e) {\n        // ignore\n        }\n    };\n    const setDefaultView = (v)=>{\n        setDefaultViewState(v);\n        try {\n            window.localStorage.setItem('default_view', v);\n        } catch (e) {\n        // ignore\n        }\n    };\n    const setGroupByStatus = (v)=>{\n        setGroupByStatusState(v);\n        try {\n            window.localStorage.setItem('group_by_status', v ? 'true' : 'false');\n        } catch (e) {\n        // ignore\n        }\n    };\n    // apply global body class for consumption by other components/styles\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppProvider.useEffect\": ()=>{\n            try {\n                if (cardDensity === 'compact') {\n                    document.body.classList.add('compact');\n                } else {\n                    document.body.classList.remove('compact');\n                }\n            } catch (e) {\n            // ignore\n            }\n        }\n    }[\"AppProvider.useEffect\"], [\n        cardDensity\n    ]);\n    const toggleKanbanHeader = ()=>{\n        setIsKanbanHeaderVisible((prevState)=>!prevState);\n    };\n    const clearState = ()=>{\n        setUsers(new Map());\n        setProjects([]);\n        setTasks([]);\n        setCurrentUser(null);\n    };\n    // Clear all authentication data including cookies\n    const clearAllAuthData = ()=>{\n        clearState();\n        // Clear authentication cookie\n        document.cookie = 'orcheplan_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n        // Clear any cached data\n        (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.clearAllCaches)();\n    };\n    const fetchData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AppProvider.useCallback[fetchData]\": async (currentUserId)=>{\n            setLoading(true);\n            try {\n                // Use cached API calls with stale-while-revalidate strategy\n                const projectsResp = await (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.getCachedProjects)({\n                    staleWhileRevalidate: true\n                });\n                const allProjectsFlat = projectsResp || [];\n                // Build nested structure\n                const projectMap = new Map();\n                allProjectsFlat.forEach({\n                    \"AppProvider.useCallback[fetchData]\": (p)=>projectMap.set(p.id, {\n                            ...normalizeProject(p),\n                            subProjects: []\n                        })\n                }[\"AppProvider.useCallback[fetchData]\"]);\n                const nestedProjects = [];\n                projectMap.forEach({\n                    \"AppProvider.useCallback[fetchData]\": (project)=>{\n                        if (project.parentProjectId) {\n                            const parent = projectMap.get(project.parentProjectId);\n                            if (parent) parent.subProjects.push(project);\n                            else nestedProjects.push(project);\n                        } else {\n                            nestedProjects.push(project);\n                        }\n                    }\n                }[\"AppProvider.useCallback[fetchData]\"]);\n                setProjects(nestedProjects);\n                // Fetch users with caching\n                const usersResp = await (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.getCachedUsers)({\n                    staleWhileRevalidate: true\n                });\n                const userList = usersResp || [];\n                const userMap = new Map();\n                userList.forEach({\n                    \"AppProvider.useCallback[fetchData]\": (u)=>userMap.set(u.id, u)\n                }[\"AppProvider.useCallback[fetchData]\"]);\n                setUsers(userMap);\n                // Log cache performance\n                const stats = (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.getCacheStats)();\n                logger.debug('Cache performance', {\n                    component: 'fetchData',\n                    stats: {\n                        hitRate: \"\".concat((stats.hitRate * 100).toFixed(1), \"%\"),\n                        hits: stats.hits,\n                        misses: stats.misses,\n                        size: stats.size\n                    }\n                });\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                // If we get authentication errors, the stored auth might be stale\n                if ((error === null || error === void 0 ? void 0 : error.status) === 401 || (error === null || error === void 0 ? void 0 : error.status) === 404) {\n                    console.warn('Authentication appears stale, clearing all authentication data');\n                    clearAllAuthData();\n                    router === null || router === void 0 ? void 0 : router.push('/login');\n                } else if ((error === null || error === void 0 ? void 0 : error.status) === 403) {\n                    console.warn('Access forbidden, clearing cached data');\n                    (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.clearAllCaches)();\n                // Don't re-fetch automatically to avoid infinite loops\n                }\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"AppProvider.useCallback[fetchData]\"], []);\n    // Refresh projects without changing loading state\n    const refreshProjects = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AppProvider.useCallback[refreshProjects]\": async ()=>{\n            try {\n                // Force refresh to bypass cache\n                const projectsResp = await (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.getCachedProjects)({\n                    forceRefresh: true\n                });\n                const allProjectsFlat = projectsResp || [];\n                const projectMap = new Map();\n                allProjectsFlat.forEach({\n                    \"AppProvider.useCallback[refreshProjects]\": (p)=>projectMap.set(p.id, {\n                            ...normalizeProject(p),\n                            subProjects: []\n                        })\n                }[\"AppProvider.useCallback[refreshProjects]\"]);\n                const nestedProjects = [];\n                projectMap.forEach({\n                    \"AppProvider.useCallback[refreshProjects]\": (project)=>{\n                        if (project.parentProjectId) {\n                            const parent = projectMap.get(project.parentProjectId);\n                            if (parent) parent.subProjects.push(project);\n                            else nestedProjects.push(project);\n                        } else {\n                            nestedProjects.push(project);\n                        }\n                    }\n                }[\"AppProvider.useCallback[refreshProjects]\"]);\n                setProjects(nestedProjects);\n            } catch (error) {\n                console.error('Error refreshing projects:', error);\n            }\n        }\n    }[\"AppProvider.useCallback[refreshProjects]\"], []);\n    // Expose cache clearing function globally for debugging\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppProvider.useEffect\": ()=>{\n            window.clearOrchePlanCache = ({\n                \"AppProvider.useEffect\": ()=>{\n                    (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.clearAllCaches)();\n                    if (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) {\n                        fetchData(currentUser.id);\n                    }\n                }\n            })[\"AppProvider.useEffect\"];\n            return ({\n                \"AppProvider.useEffect\": ()=>{\n                    delete window.clearOrchePlanCache;\n                }\n            })[\"AppProvider.useEffect\"];\n        }\n    }[\"AppProvider.useEffect\"], [\n        currentUser,\n        fetchData\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppProvider.useEffect\": ()=>{\n            let mounted = true;\n            ({\n                \"AppProvider.useEffect\": async ()=>{\n                    try {\n                        setLoading(true);\n                        const resp = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.authMe)();\n                        const user = resp === null || resp === void 0 ? void 0 : resp.user;\n                        if (mounted && user) {\n                            setCurrentUser(user);\n                            await fetchData(user.id);\n                        } else if (mounted) {\n                            // No user logged in (resp is null) - this is normal, not an error\n                            clearState();\n                        }\n                    } catch (err) {\n                        console.warn('Error checking authentication', err);\n                        clearState();\n                    } finally{\n                        if (mounted) setLoading(false);\n                    }\n                }\n            })[\"AppProvider.useEffect\"]();\n            return ({\n                \"AppProvider.useEffect\": ()=>{\n                    mounted = false;\n                }\n            })[\"AppProvider.useEffect\"];\n        }\n    }[\"AppProvider.useEffect\"], [\n        fetchData\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppProvider.useEffect\": ()=>{\n            if (loading) return;\n            if (!currentUser && pathname !== '/login' && pathname !== '/signup') {\n                router.push('/login');\n            }\n        }\n    }[\"AppProvider.useEffect\"], [\n        currentUser,\n        loading,\n        pathname,\n        router\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AppProvider.useEffect\": ()=>{\n            if (!currentUser || projects.length === 0) {\n                setTasks([]);\n                return;\n            }\n            // Initial fetch of tasks\n            const getAllProjectIds = {\n                \"AppProvider.useEffect.getAllProjectIds\": (projs)=>{\n                    let ids = [];\n                    projs.forEach({\n                        \"AppProvider.useEffect.getAllProjectIds\": (p)=>{\n                            ids.push(p.id);\n                            if (p.subProjects) {\n                                ids = ids.concat(getAllProjectIds(p.subProjects));\n                            }\n                        }\n                    }[\"AppProvider.useEffect.getAllProjectIds\"]);\n                    return ids;\n                }\n            }[\"AppProvider.useEffect.getAllProjectIds\"];\n            const allProjectIds = getAllProjectIds(projects);\n            if (allProjectIds.length === 0) {\n                setTasks([]);\n                return;\n            }\n            const CHUNK_SIZE = 100; // Increased from 30 to reduce API calls\n            const projectChunks = [];\n            for(let i = 0; i < allProjectIds.length; i += CHUNK_SIZE){\n                projectChunks.push(allProjectIds.slice(i, i + CHUNK_SIZE));\n            }\n            // Normalize task data\n            const normalizeTask = {\n                \"AppProvider.useEffect.normalizeTask\": (t)=>{\n                    var _t_statusId, _t_assigneeId, _t_parentId;\n                    return {\n                        ...t,\n                        status: (_t_statusId = t.statusId) !== null && _t_statusId !== void 0 ? _t_statusId : typeof t.status === 'string' && /^[0-9a-fA-F-]{36}$/.test(t.status) ? t.status : null,\n                        assigneeId: (_t_assigneeId = t.assigneeId) !== null && _t_assigneeId !== void 0 ? _t_assigneeId : undefined,\n                        parentId: (_t_parentId = t.parentId) !== null && _t_parentId !== void 0 ? _t_parentId : undefined\n                    };\n                }\n            }[\"AppProvider.useEffect.normalizeTask\"];\n            // Task fetching function for both initial load and fallback polling\n            const fetchTasks = {\n                \"AppProvider.useEffect.fetchTasks\": async function() {\n                    let forceRefresh = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n                    try {\n                        const results = await Promise.all(projectChunks.map({\n                            \"AppProvider.useEffect.fetchTasks\": (chunk)=>(0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.getCachedTasksByProjectIds)(chunk, {\n                                    forceRefresh,\n                                    staleWhileRevalidate: !forceRefresh\n                                })\n                        }[\"AppProvider.useEffect.fetchTasks\"]));\n                        const combined = results.flat();\n                        const normalizedTasks = combined.map(normalizeTask);\n                        setTasks(normalizedTasks);\n                        return normalizedTasks;\n                    } catch (err) {\n                        console.error('Error fetching tasks:', err);\n                        console.error('[DEBUG] Failed to fetch tasks for project IDs:', allProjectIds);\n                        // If we get a 403 error, it's likely due to requesting tasks for projects\n                        // the user no longer has access to. Clear caches but don't retry automatically.\n                        if ((err === null || err === void 0 ? void 0 : err.status) === 403) {\n                            console.warn('Forbidden error fetching tasks, clearing caches');\n                            (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.clearAllCaches)();\n                        // Don't retry automatically to avoid infinite loops\n                        }\n                        return [];\n                    }\n                }\n            }[\"AppProvider.useEffect.fetchTasks\"];\n            // Initial task fetch\n            fetchTasks();\n            // Polling fallback variables\n            let pollingInterval = null;\n            let lastTaskCount = 0;\n            let consecutiveNoChanges = 0;\n            let isWindowActive = true;\n            // Smart polling intervals for fallback\n            const getPollingInterval = {\n                \"AppProvider.useEffect.getPollingInterval\": ()=>{\n                    if (!isWindowActive) return 60000; // 1 minute when tab is not active\n                    if (consecutiveNoChanges > 3) return 30000; // 30 seconds after no changes\n                    return 15000; // 15 seconds for fallback polling (faster than before)\n                }\n            }[\"AppProvider.useEffect.getPollingInterval\"];\n            const startPolling = {\n                \"AppProvider.useEffect.startPolling\": ()=>{\n                    if (pollingInterval) clearInterval(pollingInterval);\n                    const poll = {\n                        \"AppProvider.useEffect.startPolling.poll\": async ()=>{\n                            const tasks = await fetchTasks();\n                            // Track changes to adjust polling frequency\n                            if (tasks.length === lastTaskCount) {\n                                consecutiveNoChanges++;\n                            } else {\n                                consecutiveNoChanges = 0;\n                                lastTaskCount = tasks.length;\n                            }\n                            // Restart with potentially new interval\n                            startPolling();\n                        }\n                    }[\"AppProvider.useEffect.startPolling.poll\"];\n                    pollingInterval = setInterval(poll, getPollingInterval());\n                }\n            }[\"AppProvider.useEffect.startPolling\"];\n            // Window focus/blur detection for smart polling\n            const handleFocus = {\n                \"AppProvider.useEffect.handleFocus\": ()=>{\n                    isWindowActive = true;\n                    consecutiveNoChanges = 0; // Reset when user returns\n                }\n            }[\"AppProvider.useEffect.handleFocus\"];\n            const handleBlur = {\n                \"AppProvider.useEffect.handleBlur\": ()=>{\n                    isWindowActive = false;\n                }\n            }[\"AppProvider.useEffect.handleBlur\"];\n            // Try to initialize SSE connection for real-time updates with improved implementation\n            if (!realtimeClient.current) {\n                // Use the same API base as the rest of the app for consistency\n                const getApiBase = {\n                    \"AppProvider.useEffect.getApiBase\": ()=>{\n                        // Use environment variable if set\n                        if (true) {\n                            return \"https://3000--main--orcheplan--andreas.coder.josern.com\";\n                        }\n                        if (true) {\n                            return \"https://3000--main--orcheplan--andreas.coder.josern.com\";\n                        }\n                        if (false) {}\n                        const hostname = window.location.hostname;\n                        const protocol = window.location.protocol;\n                        // Local development\n                        if (hostname === 'localhost' || hostname === '127.0.0.1') {\n                            return 'http://localhost:3000';\n                        }\n                        // External server - construct backend URL\n                        // In Coder environment, use HTTPS for backend as well\n                        const isCoderEnv = hostname.includes('coder.josern.com');\n                        const backendProtocol = isCoderEnv ? 'https:' : protocol;\n                        if (isCoderEnv) {\n                            // Special handling for Coder subdomain pattern\n                            const backendHostname = hostname.replace(/^9002--/, '3000--');\n                            return \"\".concat(backendProtocol, \"//\").concat(backendHostname);\n                        }\n                        return \"\".concat(backendProtocol, \"//\").concat(hostname, \":3000\");\n                    }\n                }[\"AppProvider.useEffect.getApiBase\"];\n                const baseUrl = getApiBase();\n                realtimeClient.current = new _lib_realtime__WEBPACK_IMPORTED_MODULE_4__[\"default\"](baseUrl);\n                // Set up event listeners for real-time updates\n                realtimeClient.current.on('task_update', {\n                    \"AppProvider.useEffect\": (data)=>{\n                        const { action, data: taskData } = data;\n                        const normalizedTask = normalizeTask(taskData);\n                        setTasks({\n                            \"AppProvider.useEffect\": (prev)=>{\n                                switch(action){\n                                    case 'created':\n                                        // Add new task if not already present (check by ID)\n                                        const existingTask = prev.find({\n                                            \"AppProvider.useEffect.existingTask\": (t)=>t.id === normalizedTask.id\n                                        }[\"AppProvider.useEffect.existingTask\"]);\n                                        if (!existingTask) {\n                                            return [\n                                                ...prev,\n                                                normalizedTask\n                                            ];\n                                        } else {\n                                            return prev;\n                                        }\n                                    case 'updated':\n                                        // Update existing task\n                                        return prev.map({\n                                            \"AppProvider.useEffect\": (t)=>t.id === normalizedTask.id ? normalizedTask : t\n                                        }[\"AppProvider.useEffect\"]);\n                                    case 'deleted':\n                                        // Remove deleted task\n                                        return prev.filter({\n                                            \"AppProvider.useEffect\": (t)=>t.id !== normalizedTask.id\n                                        }[\"AppProvider.useEffect\"]);\n                                    default:\n                                        return prev;\n                                }\n                            }\n                        }[\"AppProvider.useEffect\"]);\n                    }\n                }[\"AppProvider.useEffect\"]);\n                realtimeClient.current.on('project_update', {\n                    \"AppProvider.useEffect\": (data)=>{\n                        // Handle project updates - refresh projects to get updated membership/access\n                        refreshProjects();\n                    }\n                }[\"AppProvider.useEffect\"]);\n                realtimeClient.current.on('status_update', {\n                    \"AppProvider.useEffect\": (data)=>{\n                    // Handle status updates - could update project status options\n                    }\n                }[\"AppProvider.useEffect\"]);\n                // Handle SSE connection failure - fall back to polling\n                realtimeClient.current.on('connection_failed', {\n                    \"AppProvider.useEffect\": (data)=>{\n                        setIsRealtimeConnected(false);\n                        // Set up window focus/blur listeners for smart polling\n                        window.addEventListener('focus', handleFocus);\n                        window.addEventListener('blur', handleBlur);\n                        // Start polling as fallback\n                        startPolling();\n                    }\n                }[\"AppProvider.useEffect\"]);\n            }\n            // Try to connect to real-time updates\n            realtimeClient.current.connect();\n            // Set a timeout to fall back to polling if SSE doesn't connect within 10 seconds\n            setTimeout({\n                \"AppProvider.useEffect\": ()=>{\n                    var _realtimeClient_current;\n                    if (!((_realtimeClient_current = realtimeClient.current) === null || _realtimeClient_current === void 0 ? void 0 : _realtimeClient_current.getConnectionStatus())) {\n                        setIsRealtimeConnected(false);\n                        window.addEventListener('focus', handleFocus);\n                        window.addEventListener('blur', handleBlur);\n                        startPolling();\n                    } else {\n                        setIsRealtimeConnected(true);\n                    }\n                }\n            }[\"AppProvider.useEffect\"], 10000);\n            return ({\n                \"AppProvider.useEffect\": ()=>{\n                    // Clean up on unmount or dependency change\n                    if (realtimeClient.current) {\n                        realtimeClient.current.disconnect();\n                    }\n                    if (pollingInterval) {\n                        clearInterval(pollingInterval);\n                    }\n                    window.removeEventListener('focus', handleFocus);\n                    window.removeEventListener('blur', handleBlur);\n                    setIsRealtimeConnected(false);\n                }\n            })[\"AppProvider.useEffect\"];\n        }\n    }[\"AppProvider.useEffect\"], [\n        currentUser,\n        projects\n    ]);\n    const addDefaultTaskStatuses = async (projectId)=>{\n        if (!currentUser) throw new Error('User not authenticated');\n        try {\n            const defaultStatuses = [\n                {\n                    name: 'To Do',\n                    color: '#3B82F6',\n                    order: 0,\n                    showStrikeThrough: false,\n                    hidden: false,\n                    requiresComment: false,\n                    allowsComment: false\n                },\n                {\n                    name: 'In Progress',\n                    color: '#EAB308',\n                    order: 1,\n                    showStrikeThrough: false,\n                    hidden: false,\n                    requiresComment: false,\n                    allowsComment: true\n                },\n                {\n                    name: 'Done',\n                    color: '#22C55E',\n                    order: 3,\n                    showStrikeThrough: true,\n                    hidden: false,\n                    requiresComment: false,\n                    allowsComment: false\n                },\n                {\n                    name: 'Remove',\n                    color: '#EF4444',\n                    order: 2,\n                    showStrikeThrough: false,\n                    hidden: false,\n                    requiresComment: true,\n                    allowsComment: true\n                }\n            ];\n            // Optimistically add statuses to local state with temporary IDs\n            const tempStatuses = defaultStatuses.map((s, index)=>({\n                    ...s,\n                    id: \"temp-\".concat(Date.now(), \"-\").concat(index) // temporary ID\n                }));\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId) {\n                            return {\n                                ...p,\n                                taskStatusOptions: [\n                                    ...p.taskStatusOptions || [],\n                                    ...tempStatuses\n                                ]\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n            // Create statuses via API and collect real IDs\n            const createdStatuses = [];\n            for (const s of defaultStatuses){\n                const created = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.createProjectStatus)(projectId, {\n                    label: s.name,\n                    color: s.color,\n                    order: s.order,\n                    showStrikeThrough: s.showStrikeThrough,\n                    hidden: s.hidden\n                });\n                createdStatuses.push(created);\n            }\n            // Replace temporary statuses with real ones\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId) {\n                            var _p_taskStatusOptions;\n                            return {\n                                ...p,\n                                taskStatusOptions: [\n                                    ...((_p_taskStatusOptions = p.taskStatusOptions) === null || _p_taskStatusOptions === void 0 ? void 0 : _p_taskStatusOptions.filter((s)=>!s.id.startsWith('temp-'))) || [],\n                                    ...createdStatuses\n                                ]\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n        } catch (error) {\n            logger.error('Error adding default task statuses', {\n                userId: currentUser.id,\n                projectId,\n                action: 'addDefaultTaskStatuses'\n            }, error);\n            // Revert optimistic update on error\n            await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const login = async (email, password)=>{\n        try {\n            const resp = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.authLogin)(email, password);\n            // Check if it's an expected error response\n            if (resp && 'success' in resp && resp.success === false && resp.isExpected) {\n                logger.debug('Login failed - invalid credentials', {\n                    email,\n                    action: 'login',\n                    errorType: 'authentication_failed'\n                });\n                return {\n                    success: false,\n                    error: resp.error\n                };\n            }\n            const user = resp === null || resp === void 0 ? void 0 : resp.user;\n            if (user) {\n                setCurrentUser(user);\n                await fetchData(user.id);\n                logger.info('User login successful', {\n                    userId: user.id,\n                    email,\n                    action: 'login'\n                });\n                return {\n                    success: true\n                };\n            }\n            return {\n                success: false,\n                error: 'Login failed'\n            };\n        } catch (error) {\n            var _error_body;\n            // For auth errors, log them differently to avoid scary console messages\n            if ((error === null || error === void 0 ? void 0 : error.status) === 401 || (error === null || error === void 0 ? void 0 : error.status) === 400 || (error === null || error === void 0 ? void 0 : error.isExpected)) {\n                logger.debug('Login failed - invalid credentials', {\n                    email,\n                    action: 'login',\n                    errorType: 'authentication_failed'\n                });\n            } else {\n                var _error_body1;\n                logger.error('Login error', {\n                    email,\n                    action: 'login',\n                    errorType: (error === null || error === void 0 ? void 0 : (_error_body1 = error.body) === null || _error_body1 === void 0 ? void 0 : _error_body1.error) || (error === null || error === void 0 ? void 0 : error.message) || 'unknown',\n                    status: error === null || error === void 0 ? void 0 : error.status\n                }, error);\n            }\n            const errorMessage = (error === null || error === void 0 ? void 0 : (_error_body = error.body) === null || _error_body === void 0 ? void 0 : _error_body.error) || (error === null || error === void 0 ? void 0 : error.message) || 'Login failed';\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    };\n    const logout = async ()=>{\n        try {\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.authLogout)();\n            clearState();\n            (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.clearAllCaches)(); // Clear all cached data on logout\n            router.push('/login');\n        } catch (error) {\n            // For logout errors, only log if they're unexpected (not auth failures)\n            if ((error === null || error === void 0 ? void 0 : error.status) !== 401 && !(error === null || error === void 0 ? void 0 : error.isExpected)) {\n                logger.error('Logout error', {\n                    userId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n                    action: 'logout'\n                }, error);\n            }\n        }\n    };\n    const addProject = async (project)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            const { parentProjectId, ...restOfProject } = project;\n            // default owner membership handled by backend\n            const payload = {\n                ...restOfProject\n            };\n            if (parentProjectId) payload.parentProjectId = parentProjectId;\n            const newProject = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.createProject)(payload);\n            // Invalidate all project caches\n            (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.invalidateAllProjectCaches)();\n            // Instead of optimistic updates that may have wrong membership data,\n            // refresh the projects list to get accurate access permissions\n            await refreshProjects();\n            return newProject;\n        } catch (error) {\n            console.error(\"Error adding project: \", error);\n            throw error;\n        }\n    };\n    const updateProject = async (projectId, projectData)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            // Optimistically update project in local state\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId) {\n                            const updated = {\n                                ...p,\n                                ...projectData\n                            };\n                            // Update cache optimistically\n                            (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.optimisticUpdateProject)(updated);\n                            return updated;\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.updateProjectApi)(projectId, projectData);\n            // Invalidate project caches\n            (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.invalidateProjectCaches)(projectId);\n        } catch (error) {\n            console.error(\"Error updating project(s): \", error);\n            // Revert optimistic update on error\n            if (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const getProject = async (projectId)=>{\n        try {\n            const resp = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.getProject)(projectId);\n            const proj = resp ? normalizeProject(resp) : null;\n            if (proj) {\n                // upsert into local projects state so UI components using `projects` get the normalized project\n                setProjects((prev)=>{\n                    // try to replace existing project in nested tree\n                    const replace = (arr)=>{\n                        return arr.map((p)=>{\n                            if (p.id === proj.id) return {\n                                ...proj,\n                                subProjects: p.subProjects || []\n                            };\n                            if (p.subProjects) return {\n                                ...p,\n                                subProjects: replace(p.subProjects)\n                            };\n                            return p;\n                        });\n                    };\n                    // if project exists somewhere, replace it\n                    const exists = function find(arr) {\n                        for (const p of arr){\n                            if (p.id === proj.id) return true;\n                            if (p.subProjects && find(p.subProjects)) return true;\n                        }\n                        return false;\n                    }(prev);\n                    if (exists) return replace(prev);\n                    // otherwise append at root\n                    return [\n                        ...prev,\n                        {\n                            ...proj,\n                            subProjects: proj.subProjects || []\n                        }\n                    ];\n                });\n            }\n            return proj;\n        } catch (error) {\n            console.error(\"Error getting project: \", error);\n            return null;\n        }\n    };\n    const duplicateProject = async (projectId)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            const idMap = new Map();\n            const findProjectInState = (projs, pId)=>{\n                for (const p of projs){\n                    if (p.id === pId) return p;\n                    if (p.subProjects) {\n                        const found = findProjectInState(p.subProjects, pId);\n                        if (found) return found;\n                    }\n                }\n                return null;\n            };\n            const getProjectsToDuplicate = (project)=>{\n                let list = [\n                    project\n                ];\n                if (project.subProjects) {\n                    project.subProjects.forEach((sub)=>{\n                        list = list.concat(getProjectsToDuplicate(sub));\n                    });\n                }\n                return list;\n            };\n            const rootProjectToDuplicate = findProjectInState(projects, projectId);\n            if (!rootProjectToDuplicate) throw new Error(\"Project to duplicate not found.\");\n            const allProjectsToDuplicate = getProjectsToDuplicate(rootProjectToDuplicate);\n            const oldProjectIds = allProjectsToDuplicate.map((p)=>p.id);\n            // duplication is complex; fall back to creating copies via backend where possible\n            for (const p of allProjectsToDuplicate){\n                const { id, subProjects, members, ...projectData } = p;\n                const payload = {\n                    ...projectData,\n                    name: \"\".concat(p.name, \" (Copy)\")\n                };\n                // backend should create new project and handle parent linkage\n                await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.createProject)(payload);\n            }\n            if (oldProjectIds.length > 0) {\n                // duplicate tasks via backend: fetch and recreate\n                // fetch tasks for each oldProjectId and create new ones\n                for (const oldId of oldProjectIds){\n                    const tasks = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.getTasksByProjectIds)([\n                        oldId\n                    ]);\n                    for (const t of tasks){\n                        const newProjectId = idMap.get(t.projectId);\n                        if (newProjectId) {\n                            const { id: tid, ...taskData } = t;\n                            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.createTaskApi)({\n                                ...taskData,\n                                projectId: newProjectId\n                            });\n                        }\n                    }\n                }\n            }\n            await refreshProjects();\n        } catch (error) {\n            console.error(\"Error duplicating project:\", error);\n            await refreshProjects();\n            throw error;\n        }\n    };\n    const deleteProject = async (projectId, pathname)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            const getProjectIdsFromState = (allProjects, startId)=>{\n                let ids = [];\n                const findAndCollect = (projs, pId)=>{\n                    for (const p of projs){\n                        if (p.id === pId) {\n                            const collect = (proj)=>{\n                                ids.push(proj.id);\n                                if (proj.subProjects) {\n                                    proj.subProjects.forEach(collect);\n                                }\n                            };\n                            collect(p);\n                            return true;\n                        }\n                        if (p.subProjects) {\n                            if (findAndCollect(p.subProjects, pId)) return true;\n                        }\n                    }\n                    return false;\n                };\n                findAndCollect(allProjects, startId);\n                return ids;\n            };\n            const allProjectIdsToDelete = getProjectIdsFromState(projects, projectId);\n            // Optimistically remove projects from local state\n            setProjects((prev)=>{\n                const removeProject = (projects, targetId)=>{\n                    return projects.filter((p)=>{\n                        if (p.id === targetId) return false;\n                        if (p.subProjects) {\n                            p.subProjects = removeProject(p.subProjects, targetId);\n                        }\n                        return true;\n                    });\n                };\n                let updatedProjects = prev;\n                for (const pId of allProjectIdsToDelete){\n                    updatedProjects = removeProject(updatedProjects, pId);\n                }\n                return updatedProjects;\n            });\n            // Also optimistically remove related tasks\n            setTasks((prev)=>prev.filter((task)=>!allProjectIdsToDelete.includes(task.projectId)));\n            // delete projects via backend\n            for (const pId of allProjectIdsToDelete){\n                await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.deleteProjectApi)(pId);\n            }\n            const remainingProjectIds = new Set(allProjectIdsToDelete);\n            const isViewingDeletedProject = [\n                ...remainingProjectIds\n            ].some((id)=>pathname.includes(id));\n            if (isViewingDeletedProject) {\n                router.push('/dashboard');\n            }\n        } catch (error) {\n            console.error(\"FINAL DELETION ERROR:\", error);\n            // Revert optimistic update on error\n            if (currentUser.id) {\n                await fetchData(currentUser.id);\n            }\n            throw error;\n        }\n    };\n    // Project Member Management\n    const addProjectMemberFunc = async (projectId, userId, role)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            // Optimistically add member to local state\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId) {\n                            return {\n                                ...p,\n                                members: {\n                                    ...p.members || {},\n                                    [userId]: role\n                                }\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.addProjectMember)(projectId, userId, role);\n        } catch (error) {\n            console.error(\"Error adding project member:\", error);\n            // Revert optimistic update on error\n            await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const updateProjectMemberRoleFunc = async (projectId, userId, role)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            // Optimistically update member role in local state\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId && p.members) {\n                            return {\n                                ...p,\n                                members: {\n                                    ...p.members,\n                                    [userId]: role\n                                }\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.updateProjectMemberRole)(projectId, userId, role);\n        } catch (error) {\n            console.error(\"Error updating project member role:\", error);\n            // Revert optimistic update on error\n            await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const removeProjectMemberFunc = async (projectId, userId)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            // Optimistically remove member from local state\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId && p.members) {\n                            const newMembers = {\n                                ...p.members\n                            };\n                            delete newMembers[userId];\n                            return {\n                                ...p,\n                                members: newMembers\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.removeProjectMember)(projectId, userId);\n        } catch (error) {\n            console.error(\"Error removing project member:\", error);\n            // Revert optimistic update on error\n            await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const addTask = async (task)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            const body = {\n                ...task\n            };\n            // Convert status field to statusId for API compatibility\n            if (body.status) {\n                body.statusId = body.status;\n                delete body.status;\n            }\n            // remove undefined, null, and empty-string values to avoid sending invalid FK references\n            Object.keys(body).forEach((k)=>{\n                if (body[k] === undefined || body[k] === null || typeof body[k] === 'string' && body[k].trim() === '') {\n                    delete body[k];\n                }\n            });\n            // Call API to create task\n            const newTask = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.createTaskApi)(body);\n            // Invalidate task caches for affected projects\n            if (newTask && newTask.projectId) {\n                (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.invalidateTaskCaches)(newTask);\n            }\n            // Optimistically add the task to local state (SSE will also broadcast, but we have duplicate protection)\n            if (newTask) {\n                var _newTask_status, _ref, _newTask_assigneeId, _newTask_parentId;\n                const normalizedTask = {\n                    ...newTask,\n                    status: (_ref = (_newTask_status = newTask.status) !== null && _newTask_status !== void 0 ? _newTask_status : newTask.statusId) !== null && _ref !== void 0 ? _ref : null,\n                    assigneeId: (_newTask_assigneeId = newTask.assigneeId) !== null && _newTask_assigneeId !== void 0 ? _newTask_assigneeId : undefined,\n                    parentId: (_newTask_parentId = newTask.parentId) !== null && _newTask_parentId !== void 0 ? _newTask_parentId : undefined\n                };\n                setTasks((prev)=>{\n                    // Extra safety check to prevent duplicates\n                    if (prev.find((t)=>t.id === normalizedTask.id)) {\n                        return prev;\n                    }\n                    return [\n                        ...prev,\n                        normalizedTask\n                    ];\n                });\n                return normalizedTask;\n            }\n            throw new Error('Failed to create task');\n        } catch (error) {\n            console.error(\"Error adding task: \", error);\n            throw error;\n        }\n    };\n    const updateTask = async (updatedTask)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            const { id, ...taskData } = updatedTask;\n            const body = {\n                ...taskData\n            };\n            // remove undefined fields\n            Object.keys(body).forEach((k)=>body[k] === undefined && delete body[k]);\n            // strip server-only timestamp fields if present\n            delete body.createdAt;\n            delete body.updatedAt;\n            // Normalize status: ensure we send only `statusId` (backend accepts either but prefers statusId when both present).\n            // If the caller provided `status` (new id), use it; otherwise keep any explicit statusId.\n            if (body.status !== undefined) {\n                body.statusId = body.status;\n            }\n            // remove client-side `status` field to avoid sending both\n            delete body.status;\n            var _body_statusId, _ref;\n            // optimistic update: merge the requested changes into local state so UI updates immediately\n            const optimistic = {\n                ...updatedTask,\n                // ensure we reflect the requested statusId/status shape\n                status: (_ref = (_body_statusId = body.statusId) !== null && _body_statusId !== void 0 ? _body_statusId : updatedTask.status) !== null && _ref !== void 0 ? _ref : null,\n                assigneeId: body.assigneeId !== undefined ? body.assigneeId : updatedTask.assigneeId,\n                parentId: body.parentId !== undefined ? body.parentId : updatedTask.parentId\n            };\n            // Update local state\n            setTasks((prev)=>prev.map((t)=>t.id === id ? optimistic : t));\n            // Update cache optimistically\n            (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.optimisticUpdateTask)(optimistic);\n            // call API and reconcile response\n            const resp = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.updateTaskApi)(id, body);\n            // Invalidate task caches for affected projects\n            (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.invalidateTaskCaches)(optimistic);\n            var _resp_status, _ref1, _resp_assigneeId, _resp_parentId;\n            // normalize response to frontend shape (match fetchTasksForChunks normalization)\n            const normalized = {\n                ...resp,\n                status: (_ref1 = (_resp_status = resp.status) !== null && _resp_status !== void 0 ? _resp_status : resp.statusId) !== null && _ref1 !== void 0 ? _ref1 : null,\n                assigneeId: (_resp_assigneeId = resp.assigneeId) !== null && _resp_assigneeId !== void 0 ? _resp_assigneeId : undefined,\n                parentId: (_resp_parentId = resp.parentId) !== null && _resp_parentId !== void 0 ? _resp_parentId : undefined\n            };\n            // reconcile authoritative server response\n            setTasks((prev)=>prev.map((t)=>t.id === normalized.id ? normalized : t));\n        } catch (error) {\n            console.error(\"Error updating task: \", error);\n            // Invalidate cache to force refresh on error\n            if (updatedTask.projectId) {\n                (0,_lib_cached_api__WEBPACK_IMPORTED_MODULE_6__.invalidateTaskCaches)(updatedTask);\n            }\n        }\n    };\n    // Fast update for drag operations - only updates UI, debounces API calls\n    const updateTaskImmediate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AppProvider.useCallback[updateTaskImmediate]\": (updatedTask)=>{\n            if (!currentUser) return;\n            // Update UI immediately\n            setTasks({\n                \"AppProvider.useCallback[updateTaskImmediate]\": (prev)=>prev.map({\n                        \"AppProvider.useCallback[updateTaskImmediate]\": (t)=>t.id === updatedTask.id ? updatedTask : t\n                    }[\"AppProvider.useCallback[updateTaskImmediate]\"])\n            }[\"AppProvider.useCallback[updateTaskImmediate]\"]);\n            // Store the pending update\n            pendingTaskUpdates.current.set(updatedTask.id, updatedTask);\n            // Clear existing timeout for this task\n            const existingTimeout = updateTaskTimeouts.current.get(updatedTask.id);\n            if (existingTimeout) {\n                clearTimeout(existingTimeout);\n            }\n            // Set new debounced API call\n            const timeout = setTimeout({\n                \"AppProvider.useCallback[updateTaskImmediate].timeout\": async ()=>{\n                    const taskToUpdate = pendingTaskUpdates.current.get(updatedTask.id);\n                    if (taskToUpdate) {\n                        try {\n                            const { id, ...taskData } = taskToUpdate;\n                            const body = {\n                                ...taskData\n                            };\n                            Object.keys(body).forEach({\n                                \"AppProvider.useCallback[updateTaskImmediate].timeout\": (k)=>body[k] === undefined && delete body[k]\n                            }[\"AppProvider.useCallback[updateTaskImmediate].timeout\"]);\n                            delete body.createdAt;\n                            delete body.updatedAt;\n                            if (body.status !== undefined) {\n                                body.statusId = body.status;\n                            }\n                            delete body.status;\n                            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.updateTaskApi)(id, body);\n                            // Clean up\n                            pendingTaskUpdates.current.delete(updatedTask.id);\n                            updateTaskTimeouts.current.delete(updatedTask.id);\n                        } catch (error) {\n                            console.error(\"Error in debounced task update:\", error);\n                            // Revert to server state on error\n                            if (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) await fetchData(currentUser.id);\n                        }\n                    }\n                }\n            }[\"AppProvider.useCallback[updateTaskImmediate].timeout\"], 500); // 500ms debounce\n            updateTaskTimeouts.current.set(updatedTask.id, timeout);\n        }\n    }[\"AppProvider.useCallback[updateTaskImmediate]\"], [\n        currentUser\n    ]);\n    const deleteTask = async (taskId)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            // Optimistically remove the task from local state\n            setTasks((prev)=>prev.filter((t)=>t.id !== taskId));\n            // Call API to delete task\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.deleteTaskApi)(taskId);\n        } catch (error) {\n            console.error(\"Error deleting task: \", error);\n            // Revert the optimistic update by refetching on error\n            if (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const updateUser = async (userId, userData)=>{\n        if (!currentUser) throw new Error(\"User not authenticated\");\n        try {\n            const resp = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.updateUserApi)(userId, {\n                name: userData.name,\n                email: userData.email\n            });\n            const updated = (resp === null || resp === void 0 ? void 0 : resp.user) || {\n                id: userId,\n                ...userData\n            };\n            setUsers((prevUsers)=>{\n                const newUsers = new Map(prevUsers);\n                if (newUsers.has(userId)) {\n                    const existingUser = newUsers.get(userId);\n                    newUsers.set(userId, {\n                        ...existingUser,\n                        ...updated\n                    });\n                }\n                return newUsers;\n            });\n            if (currentUser.id === userId) {\n                setCurrentUser((prev)=>prev ? {\n                        ...prev,\n                        ...updated\n                    } : null);\n            }\n        } catch (error) {\n            console.error(\"Error updating user:\", error);\n            throw error;\n        }\n    };\n    const createUser = async (user, password)=>{\n        const resp = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.authSignup)(user.name, user.email, password);\n        // Check if it's an expected error response\n        if (resp && 'success' in resp && resp.success === false && resp.isExpected) {\n            logger.debug('Signup failed - user input error', {\n                email: user.email,\n                action: 'signup',\n                errorType: 'user_input_error'\n            });\n            // Create a plain error object without throwing to avoid console logging\n            const error = {\n                message: resp.error,\n                status: resp.status,\n                isExpected: true\n            };\n            throw error;\n        }\n        const created = resp === null || resp === void 0 ? void 0 : resp.user;\n        if (created) {\n            // Optionally update local users list\n            setUsers((prev)=>{\n                const newUsers = new Map(prev);\n                newUsers.set(created.id, created);\n                return newUsers;\n            });\n            setCurrentUser(created);\n            await fetchData(created.id);\n        }\n    };\n    const addProjectTaskStatus = async (projectId, status)=>{\n        if (!currentUser) throw new Error('User not authenticated');\n        try {\n            // Generate a temporary ID for optimistic update\n            const tempId = \"temp-\".concat(Date.now());\n            const existingStatuses = (()=>{\n                const project = projects.find((p)=>p.id === projectId);\n                return (project === null || project === void 0 ? void 0 : project.taskStatusOptions) || [];\n            })();\n            const newOrder = existingStatuses.length;\n            // Create optimistic status object\n            const optimisticStatus = {\n                id: tempId,\n                name: status.name || status.label || 'Status',\n                color: status.color || '#3B82F6',\n                order: newOrder,\n                showStrikeThrough: status.showStrikeThrough || false,\n                hidden: status.hidden || false,\n                requiresComment: status.requiresComment || false,\n                allowsComment: status.allowsComment !== false\n            };\n            // Optimistically add the status to local state\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId) {\n                            return {\n                                ...p,\n                                taskStatusOptions: [\n                                    ...p.taskStatusOptions || [],\n                                    optimisticStatus\n                                ]\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n            // Call API to create status\n            const createdStatus = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.createProjectStatus)(projectId, {\n                label: optimisticStatus.name,\n                color: optimisticStatus.color,\n                order: newOrder,\n                showStrikeThrough: optimisticStatus.showStrikeThrough,\n                hidden: optimisticStatus.hidden,\n                requiresComment: optimisticStatus.requiresComment,\n                allowsComment: optimisticStatus.allowsComment\n            });\n            // Replace temp status with real one\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId && p.taskStatusOptions) {\n                            return {\n                                ...p,\n                                taskStatusOptions: p.taskStatusOptions.map((s)=>s.id === tempId ? {\n                                        ...createdStatus,\n                                        name: createdStatus.label || createdStatus.name\n                                    } : s)\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n        } catch (error) {\n            console.error('Error adding project task status:', error);\n            // Revert optimistic update on error\n            if (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const updateProjectTaskStatus = async (projectId, statusId, statusData)=>{\n        if (!currentUser) throw new Error('User not authenticated');\n        try {\n            // Optimistically update the project status in local state\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId && p.taskStatusOptions) {\n                            return {\n                                ...p,\n                                taskStatusOptions: p.taskStatusOptions.map((s)=>s.id === statusId ? {\n                                        ...s,\n                                        ...statusData\n                                    } : s)\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n            // Call API to update status\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.updateProjectStatus)(projectId, statusId, {\n                label: statusData.name || statusData.label,\n                order: statusData.order,\n                color: statusData.color,\n                showStrikeThrough: statusData.showStrikeThrough,\n                hidden: statusData.hidden,\n                requiresComment: statusData.requiresComment,\n                allowsComment: statusData.allowsComment\n            });\n        } catch (error) {\n            console.error('Error updating project task status:', error);\n            // Revert optimistic update on error\n            if (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const deleteProjectTaskStatus = async (projectId, statusId)=>{\n        if (!currentUser) throw new Error('User not authenticated');\n        try {\n            // Optimistically remove the status from local state\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId && p.taskStatusOptions) {\n                            return {\n                                ...p,\n                                taskStatusOptions: p.taskStatusOptions.filter((s)=>s.id !== statusId)\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n            // Call API to delete status\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.deleteProjectStatus)(projectId, statusId);\n        } catch (error) {\n            console.error('Error deleting project task status:', error);\n            // Revert optimistic update on error\n            if (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const updateProjectTaskStatusOrder = async (projectId, statuses)=>{\n        if (!currentUser) throw new Error('User not authenticated');\n        try {\n            // Optimistically update the order in local state\n            setProjects((prev)=>{\n                const updateProject = (projects)=>{\n                    return projects.map((p)=>{\n                        if (p.id === projectId && p.taskStatusOptions) {\n                            // Create a map for quick lookup of new orders\n                            const orderMap = new Map(statuses.map((s)=>[\n                                    s.id,\n                                    s.order\n                                ]));\n                            return {\n                                ...p,\n                                taskStatusOptions: p.taskStatusOptions.map((s)=>{\n                                    var _orderMap_get;\n                                    return {\n                                        ...s,\n                                        order: (_orderMap_get = orderMap.get(s.id)) !== null && _orderMap_get !== void 0 ? _orderMap_get : s.order\n                                    };\n                                }).sort((a, b)=>a.order - b.order)\n                            };\n                        }\n                        if (p.subProjects) {\n                            return {\n                                ...p,\n                                subProjects: updateProject(p.subProjects)\n                            };\n                        }\n                        return p;\n                    });\n                };\n                return updateProject(prev);\n            });\n            // Call API to update order\n            const payload = statuses.map((s)=>({\n                    id: s.id,\n                    order: s.order\n                }));\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.updateProjectStatusesOrder)(projectId, payload);\n        } catch (error) {\n            console.error('Error updating project task status order:', error);\n            // Revert optimistic update on error\n            if (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) await fetchData(currentUser.id);\n            throw error;\n        }\n    };\n    const changePassword = async (currentPassword, newPassword)=>{\n        try {\n            await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.authChangePassword)(currentPassword, newPassword);\n        } catch (error) {\n            console.error('Error changing password:', error);\n            throw error;\n        }\n    };\n    const findUserByEmail = async (email)=>{\n        // Prefer searching cached users; fall back to API fetch\n        const found = Array.from(users.values()).find((u)=>u.email === email);\n        if (found) return found;\n        try {\n            const all = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.getUsers)();\n            const arr = all || [];\n            const match = arr.find((u)=>u.email === email) || null;\n            return match;\n        } catch (err) {\n            console.error('Error finding user by email via backend:', err);\n            return null;\n        }\n    };\n    const findUserByEmailOrName = async (query)=>{\n        // Prefer searching cached users; fall back to API fetch\n        const found = Array.from(users.values()).find((u)=>u.email === query || u.name === query);\n        if (found) return found;\n        try {\n            const all = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_2__.getUsers)();\n            const arr = all || [];\n            const match = arr.find((u)=>u.email === query || u.name === query) || null;\n            return match;\n        } catch (err) {\n            console.error('Error finding user by email or name via backend:', err);\n            return null;\n        }\n    };\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"AppProvider.useMemo[contextValue]\": ()=>({\n                users,\n                projects,\n                tasks,\n                loading,\n                currentUser,\n                login,\n                logout,\n                addProject,\n                updateProject,\n                getProject,\n                duplicateProject,\n                addProjectMember: addProjectMemberFunc,\n                updateProjectMemberRole: updateProjectMemberRoleFunc,\n                removeProjectMember: removeProjectMemberFunc,\n                addTask,\n                updateTask,\n                updateTaskImmediate,\n                deleteTask,\n                updateUser,\n                createUser,\n                changePassword,\n                findUserByEmail,\n                findUserByEmailOrName,\n                deleteProject,\n                isKanbanHeaderVisible,\n                toggleKanbanHeader,\n                isSidebarOpenByDefault,\n                toggleSidebarDefault,\n                cardDensity,\n                setCardDensity,\n                defaultView,\n                setDefaultView,\n                groupByStatus,\n                setGroupByStatus,\n                addProjectTaskStatus,\n                updateProjectTaskStatus,\n                deleteProjectTaskStatus,\n                updateProjectTaskStatusOrder,\n                addDefaultTaskStatuses\n            })\n    }[\"AppProvider.useMemo[contextValue]\"], [\n        users,\n        projects,\n        tasks,\n        loading,\n        currentUser,\n        login,\n        logout,\n        addProject,\n        updateProject,\n        getProject,\n        duplicateProject,\n        addProjectMemberFunc,\n        updateProjectMemberRoleFunc,\n        removeProjectMemberFunc,\n        addTask,\n        updateTask,\n        updateTaskImmediate,\n        deleteTask,\n        updateUser,\n        createUser,\n        changePassword,\n        findUserByEmail,\n        findUserByEmailOrName,\n        deleteProject,\n        isKanbanHeaderVisible,\n        toggleKanbanHeader,\n        isSidebarOpenByDefault,\n        toggleSidebarDefault,\n        cardDensity,\n        setCardDensity,\n        defaultView,\n        setDefaultView,\n        groupByStatus,\n        setGroupByStatus,\n        addProjectTaskStatus,\n        updateProjectTaskStatus,\n        deleteProjectTaskStatus,\n        updateProjectTaskStatusOrder,\n        addDefaultTaskStatuses\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AppContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"/home/coder/OrchePlan/frontend/src/context/app-context.tsx\",\n        lineNumber: 1578,\n        columnNumber: 5\n    }, this);\n}\n_s(AppProvider, \"BOMbRYlxmXYFR7iR0InKEzi9lGc=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter,\n        next_navigation__WEBPACK_IMPORTED_MODULE_3__.usePathname\n    ];\n});\n_c = AppProvider;\nfunction useApp() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AppContext);\n    if (context === undefined) {\n        throw new Error('useApp must be used within an AppProvider');\n    }\n    return context;\n}\n_s1(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/app-context.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addProjectMember: () => (/* binding */ addProjectMember),\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   authChangePassword: () => (/* binding */ authChangePassword),\n/* harmony export */   authLogin: () => (/* binding */ authLogin),\n/* harmony export */   authLogout: () => (/* binding */ authLogout),\n/* harmony export */   authMe: () => (/* binding */ authMe),\n/* harmony export */   authSignup: () => (/* binding */ authSignup),\n/* harmony export */   createProject: () => (/* binding */ createProject),\n/* harmony export */   createProjectStatus: () => (/* binding */ createProjectStatus),\n/* harmony export */   createTaskApi: () => (/* binding */ createTaskApi),\n/* harmony export */   createTaskComment: () => (/* binding */ createTaskComment),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   deleteProjectApi: () => (/* binding */ deleteProjectApi),\n/* harmony export */   deleteProjectStatus: () => (/* binding */ deleteProjectStatus),\n/* harmony export */   deleteTaskApi: () => (/* binding */ deleteTaskApi),\n/* harmony export */   deleteTaskComment: () => (/* binding */ deleteTaskComment),\n/* harmony export */   externalProxy: () => (/* binding */ externalProxy),\n/* harmony export */   getApiBase: () => (/* binding */ getApiBase),\n/* harmony export */   getProject: () => (/* binding */ getProject),\n/* harmony export */   getProjectStatuses: () => (/* binding */ getProjectStatuses),\n/* harmony export */   getProjects: () => (/* binding */ getProjects),\n/* harmony export */   getTaskComments: () => (/* binding */ getTaskComments),\n/* harmony export */   getTasksByProjectIds: () => (/* binding */ getTasksByProjectIds),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   moveTaskToStatus: () => (/* binding */ moveTaskToStatus),\n/* harmony export */   removeProjectMember: () => (/* binding */ removeProjectMember),\n/* harmony export */   updateProjectApi: () => (/* binding */ updateProjectApi),\n/* harmony export */   updateProjectMemberRole: () => (/* binding */ updateProjectMemberRole),\n/* harmony export */   updateProjectStatus: () => (/* binding */ updateProjectStatus),\n/* harmony export */   updateProjectStatusesOrder: () => (/* binding */ updateProjectStatusesOrder),\n/* harmony export */   updateTaskApi: () => (/* binding */ updateTaskApi),\n/* harmony export */   updateTaskComment: () => (/* binding */ updateTaskComment),\n/* harmony export */   updateUserApi: () => (/* binding */ updateUserApi)\n/* harmony export */ });\n/* harmony import */ var _csrf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./csrf */ \"(app-pages-browser)/./src/lib/csrf.ts\");\n/* __next_internal_client_entry_do_not_use__ getApiBase,authLogin,authSignup,authLogout,authMe,authChangePassword,externalProxy,getProjects,getProject,createProject,updateProjectApi,deleteProjectApi,addProjectMember,updateProjectMemberRole,removeProjectMember,getUsers,updateUserApi,getTasksByProjectIds,createTaskApi,updateTaskApi,deleteTaskApi,getTaskComments,createTaskComment,updateTaskComment,deleteTaskComment,getProjectStatuses,createProjectStatus,updateProjectStatus,deleteProjectStatus,updateProjectStatusesOrder,api,moveTaskToStatus,default auto */ \n// Smart API base URL detection\nconst getApiBase = ()=>{\n    // Server-side rendering\n    if (false) {}\n    // Client-side - use environment variable or auto-detect\n    if (true) {\n        return \"https://3000--main--orcheplan--andreas.coder.josern.com\";\n    }\n    // Auto-detect based on current location\n    const hostname = window.location.hostname;\n    const protocol = window.location.protocol;\n    // Local development\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n        return 'http://localhost:3000';\n    }\n    // External server - construct backend URL\n    // In Coder environment, use HTTPS for backend as well\n    const isCoderEnv = hostname.includes('coder.josern.com');\n    const backendProtocol = isCoderEnv ? 'https:' : protocol;\n    if (isCoderEnv) {\n        // Special handling for Coder subdomain pattern\n        const backendHostname = hostname.replace(/^9002--/, '3000--');\n        const apiBase = \"\".concat(backendProtocol, \"//\").concat(backendHostname);\n        return apiBase;\n    }\n    const apiBase = \"\".concat(backendProtocol, \"//\").concat(hostname, \":3000\");\n    return apiBase;\n};\nconst API_BASE = getApiBase();\n// We use cookie-based auth (HttpOnly cookie). Avoid relying on client-stored JWTs.\nlet authToken = null;\nfunction setAuthToken(token) {\n    // Keep function for legacy cleanup; do not persist tokens to localStorage by default.\n    authToken = null;\n    try {\n        if ( true && token === null) {\n            // remove any legacy token value\n            window.localStorage.removeItem('orcheplan_token');\n        }\n    } catch (e) {\n    // ignore storage errors in restricted environments\n    }\n}\n// Create an error that won't log stack traces (expected user error)\nfunction createExpectedError(message, status, body) {\n    const error = new Error(message);\n    error.status = status;\n    error.body = body;\n    error.isExpected = true;\n    return error;\n}\nasync function request(path) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const headers = opts.headers ? {\n        ...opts.headers\n    } : {};\n    // Add CSRF token for state-changing requests\n    if (opts.method && [\n        'POST',\n        'PUT',\n        'DELETE',\n        'PATCH'\n    ].includes(opts.method.toUpperCase())) {\n        try {\n            await (0,_csrf__WEBPACK_IMPORTED_MODULE_0__.addCsrfHeaders)(headers);\n        } catch (error) {\n            // In production, this should fail the request\n            if (false) {}\n        }\n    }\n    // We rely on cookie-based authentication (credentials: 'include').\n    // Do not attach Authorization header from client-side JWTs.\n    if (opts.body && typeof opts.body === 'object') {\n        headers['Content-Type'] = 'application/json';\n        opts.body = JSON.stringify(opts.body);\n    }\n    const url = API_BASE + path;\n    try {\n        const res = await fetch(url, {\n            credentials: 'include',\n            ...opts,\n            headers\n        });\n        const text = await res.text();\n        let data = undefined;\n        try {\n            data = text ? JSON.parse(text) : undefined;\n        } catch (e) {\n            data = text;\n        }\n        // debug: log small request/response summaries to aid local troubleshooting\n        try {\n            const safeBody = (()=>{\n                try {\n                    return opts.body ? JSON.parse(opts.body) : null;\n                } catch (e) {\n                    return opts.body;\n                }\n            })();\n        // Remove debug logging in production\n        } catch (e) {}\n        if (!res.ok) {\n            const msg = (data === null || data === void 0 ? void 0 : data.message) || (data === null || data === void 0 ? void 0 : data.error) || res.statusText || 'Request failed';\n            // Check if this is an expected error that shouldn't create a logged Error\n            const isAuthEndpoint = url.includes('/auth/');\n            const is400 = res.status === 400;\n            const is401 = res.status === 401;\n            const is404 = res.status === 404;\n            const is409 = res.status === 409;\n            const isExpectedAuth = isAuthEndpoint && (is400 || is401 || is404 || is409);\n            // Create error object\n            let err;\n            if (isExpectedAuth) {\n                // For expected auth errors, create a plain object that won't be logged by the browser\n                err = {\n                    message: msg,\n                    status: res.status,\n                    body: data,\n                    isExpected: true,\n                    name: 'ExpectedAPIError'\n                };\n            } else {\n                // For unexpected errors, create a proper Error object for debugging\n                err = new Error(msg);\n                err.status = res.status;\n                err.body = data;\n            }\n            throw err;\n        }\n        return data;\n    } catch (error) {\n        var _error_body;\n        // Check if this is a CSRF error (403 status often indicates CSRF failure)\n        if ((error === null || error === void 0 ? void 0 : error.status) === 403 && (error === null || error === void 0 ? void 0 : (_error_body = error.body) === null || _error_body === void 0 ? void 0 : _error_body.code) === 'EBADCSRFTOKEN') {\n            // Clear cached CSRF token and retry once\n            const { clearCsrfToken } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./csrf */ \"(app-pages-browser)/./src/lib/csrf.ts\"));\n            clearCsrfToken();\n            // Only retry once to avoid infinite loops\n            if (!opts._csrfRetry) {\n                return request(path, {\n                    ...opts,\n                    _csrfRetry: true\n                });\n            }\n        }\n        // Check if this is an expected error that shouldn't be logged\n        const isAuthEndpoint = url.includes('/auth/');\n        const is400 = (error === null || error === void 0 ? void 0 : error.status) === 400;\n        const is401 = (error === null || error === void 0 ? void 0 : error.status) === 401;\n        const is404 = (error === null || error === void 0 ? void 0 : error.status) === 404;\n        const is409 = (error === null || error === void 0 ? void 0 : error.status) === 409;\n        const isExpectedAuth = isAuthEndpoint && (is400 || is401 || is404 || is409);\n        const isStaleAuth = !isAuthEndpoint && (is401 || is404);\n        // Mark expected errors\n        if (isExpectedAuth || isStaleAuth) {\n            error.isExpected = true;\n        }\n        // Only log unexpected errors\n        if (!isExpectedAuth && !isStaleAuth) {\n            var _error_constructor;\n            console.error('[api] Request failed:', {\n                url,\n                method: opts.method || 'GET',\n                error: error instanceof Error ? error.message : String(error),\n                status: error === null || error === void 0 ? void 0 : error.status,\n                statusText: error === null || error === void 0 ? void 0 : error.statusText,\n                body: error === null || error === void 0 ? void 0 : error.body,\n                stack: error instanceof Error ? error.stack : undefined,\n                fullError: error,\n                errorType: typeof error,\n                errorConstructor: error === null || error === void 0 ? void 0 : (_error_constructor = error.constructor) === null || _error_constructor === void 0 ? void 0 : _error_constructor.name,\n                isNetworkError: !(error === null || error === void 0 ? void 0 : error.status),\n                timestamp: new Date().toISOString(),\n                // Additional debugging info\n                errorKeys: error ? Object.keys(error) : [],\n                errorJson: error ? JSON.stringify(error, null, 2) : 'null',\n                hasErrorMessage: !!(error === null || error === void 0 ? void 0 : error.message),\n                hasErrorStatus: !!(error === null || error === void 0 ? void 0 : error.status),\n                hasErrorBody: !!(error === null || error === void 0 ? void 0 : error.body),\n                isAuthEndpoint,\n                expectedAuthFlags: {\n                    isExpectedAuth,\n                    isStaleAuth,\n                    is400,\n                    is401,\n                    is404,\n                    is409\n                }\n            });\n        } else if (isStaleAuth) {\n            // Log stale auth as warning only\n            console.warn('[api] Authentication may be stale:', {\n                url,\n                status: error.status,\n                message: 'Consider clearing browser data if this persists'\n            });\n        }\n        // For isExpectedAuth, we don't log anything (silent)\n        throw error;\n    }\n}\nasync function authLogin(email, password) {\n    // For cookie-based auth we don't need to persist the JWT client-side.\n    // The server sets an HttpOnly cookie with the token.\n    try {\n        const resp = await request('/auth/login', {\n            method: 'POST',\n            body: {\n                email,\n                password\n            }\n        });\n        return resp;\n    } catch (error) {\n        // For expected auth errors, don't re-throw to avoid console logging\n        if (error.status === 400 || error.status === 401) {\n            var _error_body;\n            // Return the error as a structured response instead of throwing\n            return {\n                success: false,\n                error: ((_error_body = error.body) === null || _error_body === void 0 ? void 0 : _error_body.error) || error.message || 'Login failed',\n                status: error.status,\n                isExpected: true\n            };\n        }\n        // For unexpected errors, still throw\n        throw error;\n    }\n}\nasync function authSignup(name, email, password) {\n    try {\n        const resp = await request('/auth/signup', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name,\n                email,\n                password\n            })\n        });\n        return resp;\n    } catch (error) {\n        // For expected auth errors, don't re-throw to avoid console logging\n        if (error.status === 400 || error.status === 409) {\n            var _error_body;\n            // Return the error as a structured response instead of throwing\n            return {\n                success: false,\n                error: ((_error_body = error.body) === null || _error_body === void 0 ? void 0 : _error_body.error) || error.message || 'Signup failed',\n                status: error.status,\n                isExpected: true\n            };\n        }\n        // For unexpected errors, still throw\n        throw error;\n    }\n}\nasync function authLogout() {\n    try {\n        const resp = await request('/auth/logout', {\n            method: 'POST'\n        });\n        return resp;\n    } finally{\n        // clear token client-side regardless of server response\n        setAuthToken(null);\n    }\n}\nasync function authMe() {\n    try {\n        return await request('/auth/me', {\n            method: 'GET'\n        });\n    } catch (error) {\n        // If unauthorized (401) or user not found (404), return null instead of throwing\n        // This is expected when no user is logged in or session is invalid\n        if (error.status === 401 || error.status === 404) {\n            return null;\n        }\n        // For other errors, mark as unexpected and re-throw\n        error.isExpected = false;\n        throw error;\n    }\n}\nasync function authChangePassword(currentPassword, newPassword) {\n    return request('/auth/change-password', {\n        method: 'POST',\n        body: {\n            currentPassword,\n            newPassword\n        }\n    });\n}\n// Server-side external proxy helper\n// Usage: externalProxy('coder.josern.com', '/api/v2/applications/auth-redirect')\nasync function externalProxy(host, target) {\n    let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const params = new URLSearchParams();\n    params.set('host', host);\n    params.set('target', target);\n    const path = \"/external-proxy?\".concat(params.toString());\n    return request(path, {\n        method: opts.method || 'GET',\n        body: opts.body,\n        headers: opts.headers\n    });\n}\n// Projects\nasync function getProjects() {\n    return request('/projects', {\n        method: 'GET'\n    });\n}\nasync function getProject(projectId) {\n    return request(\"/projects/\".concat(projectId), {\n        method: 'GET'\n    });\n}\nasync function createProject(body) {\n    return request('/projects', {\n        method: 'POST',\n        body\n    });\n}\nasync function updateProjectApi(projectId, body) {\n    return request(\"/projects/\".concat(projectId), {\n        method: 'PUT',\n        body\n    });\n}\nasync function deleteProjectApi(projectId) {\n    return request(\"/projects/\".concat(projectId), {\n        method: 'DELETE'\n    });\n}\n// Project Members\nasync function addProjectMember(projectId, userId, role) {\n    return request(\"/projects/\".concat(projectId, \"/members\"), {\n        method: 'POST',\n        body: {\n            userId,\n            role\n        }\n    });\n}\nasync function updateProjectMemberRole(projectId, userId, role) {\n    return request(\"/projects/\".concat(projectId, \"/members/\").concat(userId), {\n        method: 'PUT',\n        body: {\n            role\n        }\n    });\n}\nasync function removeProjectMember(projectId, userId) {\n    return request(\"/projects/\".concat(projectId, \"/members/\").concat(userId), {\n        method: 'DELETE'\n    });\n}\n// Users\nasync function getUsers() {\n    return request('/users', {\n        method: 'GET'\n    });\n}\nasync function updateUserApi(userId, body) {\n    return request(\"/users/\".concat(userId), {\n        method: 'PUT',\n        body\n    });\n}\n// Tasks\nasync function getTasksByProjectIds(projectIds) {\n    const params = new URLSearchParams();\n    projectIds.forEach((id)=>params.append('projectId', id));\n    return request(\"/tasks?\".concat(params.toString()), {\n        method: 'GET'\n    });\n}\nasync function createTaskApi(body) {\n    return request('/tasks', {\n        method: 'POST',\n        body\n    });\n}\nasync function updateTaskApi(taskId, body) {\n    return request(\"/tasks/\".concat(taskId), {\n        method: 'PUT',\n        body\n    });\n}\nasync function deleteTaskApi(taskId) {\n    return request(\"/tasks/\".concat(taskId), {\n        method: 'DELETE'\n    });\n}\n// Task Comments\nasync function getTaskComments(taskId) {\n    return request(\"/tasks/\".concat(taskId, \"/comments\"), {\n        method: 'GET'\n    });\n}\nasync function createTaskComment(taskId, content) {\n    return request(\"/tasks/\".concat(taskId, \"/comments\"), {\n        method: 'POST',\n        body: {\n            content\n        }\n    });\n}\nasync function updateTaskComment(taskId, commentId, content) {\n    return request(\"/tasks/\".concat(taskId, \"/comments/\").concat(commentId), {\n        method: 'PUT',\n        body: {\n            content\n        }\n    });\n}\nasync function deleteTaskComment(taskId, commentId) {\n    return request(\"/tasks/\".concat(taskId, \"/comments/\").concat(commentId), {\n        method: 'DELETE'\n    });\n}\n// Statuses (task_statuses)\nasync function getProjectStatuses(projectId) {\n    return request(\"/projects/\".concat(projectId, \"/statuses\"), {\n        method: 'GET'\n    });\n}\nasync function createProjectStatus(projectId, body) {\n    return request(\"/projects/\".concat(projectId, \"/statuses\"), {\n        method: 'POST',\n        body\n    });\n}\nasync function updateProjectStatus(projectId, statusId, body) {\n    return request(\"/projects/\".concat(projectId, \"/statuses/\").concat(statusId), {\n        method: 'PUT',\n        body\n    });\n}\nasync function deleteProjectStatus(projectId, statusId) {\n    return request(\"/projects/\".concat(projectId, \"/statuses/\").concat(statusId), {\n        method: 'DELETE'\n    });\n}\nasync function updateProjectStatusesOrder(projectId, statuses) {\n    return request(\"/projects/\".concat(projectId, \"/statuses/order\"), {\n        method: 'PATCH',\n        body: {\n            statuses\n        }\n    });\n}\n// Generic API utility for admin and other custom endpoints\nconst api = {\n    get: function(path) {\n        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return request(path, {\n            ...opts,\n            method: 'GET'\n        });\n    },\n    post: function(path, body) {\n        let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        return request(path, {\n            ...opts,\n            method: 'POST',\n            body\n        });\n    },\n    put: function(path, body) {\n        let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        return request(path, {\n            ...opts,\n            method: 'PUT',\n            body\n        });\n    },\n    delete: function(path) {\n        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return request(path, {\n            ...opts,\n            method: 'DELETE'\n        });\n    },\n    patch: function(path, body) {\n        let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        return request(path, {\n            ...opts,\n            method: 'PATCH',\n            body\n        });\n    }\n};\n// Task move with comment requirements\nasync function moveTaskToStatus(taskId, statusId, comment) {\n    return request(\"/tasks/\".concat(taskId, \"/move\"), {\n        method: 'POST',\n        body: {\n            statusId,\n            comment\n        }\n    });\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    authLogin,\n    authSignup,\n    authLogout,\n    authMe,\n    authChangePassword,\n    getProjects,\n    getProject,\n    createProject,\n    updateProjectApi,\n    deleteProjectApi,\n    addProjectMember,\n    updateProjectMemberRole,\n    removeProjectMember,\n    getUsers,\n    updateUserApi,\n    getTasksByProjectIds,\n    createTaskApi,\n    updateTaskApi,\n    deleteTaskApi,\n    getTaskComments,\n    createTaskComment,\n    updateTaskComment,\n    deleteTaskComment,\n    getProjectStatuses,\n    createProjectStatus,\n    updateProjectStatus,\n    deleteProjectStatus,\n    updateProjectStatusesOrder\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/cache.ts":
/*!**************************!*\
  !*** ./src/lib/cache.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchCacheOperation: () => (/* binding */ BatchCacheOperation),\n/* harmony export */   CacheKeys: () => (/* binding */ CacheKeys),\n/* harmony export */   CacheTTL: () => (/* binding */ CacheTTL),\n/* harmony export */   batchCache: () => (/* binding */ batchCache),\n/* harmony export */   cacheManager: () => (/* binding */ cacheManager),\n/* harmony export */   cachedFetch: () => (/* binding */ cachedFetch)\n/* harmony export */ });\n/**\n * Advanced caching system for OrchePlan\n * Implements in-memory caching with TTL, versioning, and smart invalidation\n */ class CacheManager {\n    /**\n   * Get item from cache\n   */ get(key) {\n        const entry = this.cache.get(key);\n        if (!entry) {\n            this.stats.misses++;\n            return null;\n        }\n        // Check if expired\n        if (Date.now() > entry.expiresAt) {\n            this.cache.delete(key);\n            this.stats.misses++;\n            return null;\n        }\n        // Check version\n        if (entry.version !== this.currentVersion) {\n            this.cache.delete(key);\n            this.stats.misses++;\n            return null;\n        }\n        this.stats.hits++;\n        return entry.data;\n    }\n    /**\n   * Check if cache has valid entry\n   */ has(key) {\n        const entry = this.cache.get(key);\n        if (!entry) return false;\n        if (Date.now() > entry.expiresAt || entry.version !== this.currentVersion) {\n            this.cache.delete(key);\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Check if entry is stale but still exists\n   */ isStale(key) {\n        const entry = this.cache.get(key);\n        if (!entry) return false;\n        return Date.now() > entry.expiresAt;\n    }\n    /**\n   * Set item in cache\n   */ set(key, data) {\n        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        // Enforce max size with LRU eviction\n        if (this.cache.size >= this.maxSize) {\n            const firstKey = this.cache.keys().next().value;\n            if (firstKey) this.cache.delete(firstKey);\n        }\n        var _options_ttl;\n        const ttl = (_options_ttl = options.ttl) !== null && _options_ttl !== void 0 ? _options_ttl : this.defaultTTL;\n        var _options_version;\n        const version = (_options_version = options.version) !== null && _options_version !== void 0 ? _options_version : this.currentVersion;\n        const entry = {\n            data,\n            timestamp: Date.now(),\n            version,\n            expiresAt: Date.now() + ttl\n        };\n        this.cache.set(key, entry);\n    }\n    /**\n   * Invalidate specific cache key\n   */ invalidate(key) {\n        this.cache.delete(key);\n    }\n    /**\n   * Invalidate all keys matching a pattern\n   */ invalidatePattern(pattern) {\n        const regex = typeof pattern === 'string' ? new RegExp(pattern) : pattern;\n        for (const key of this.cache.keys()){\n            if (regex.test(key)) {\n                this.cache.delete(key);\n            }\n        }\n    }\n    /**\n   * Invalidate all cache entries\n   */ invalidateAll() {\n        this.cache.clear();\n        this.currentVersion++;\n    }\n    /**\n   * Remove expired entries\n   */ cleanup() {\n        const now = Date.now();\n        const expiredKeys = [];\n        for (const [key, entry] of this.cache.entries()){\n            if (now > entry.expiresAt || entry.version !== this.currentVersion) {\n                expiredKeys.push(key);\n            }\n        }\n        expiredKeys.forEach((key)=>this.cache.delete(key));\n        if (expiredKeys.length > 0) {}\n    }\n    /**\n   * Get cache statistics\n   */ getStats() {\n        const total = this.stats.hits + this.stats.misses;\n        return {\n            hits: this.stats.hits,\n            misses: this.stats.misses,\n            size: this.cache.size,\n            hitRate: total > 0 ? this.stats.hits / total : 0\n        };\n    }\n    /**\n   * Reset statistics\n   */ resetStats() {\n        this.stats = {\n            hits: 0,\n            misses: 0\n        };\n    }\n    /**\n   * Clear all cache and stats\n   */ clear() {\n        this.cache.clear();\n        this.stats = {\n            hits: 0,\n            misses: 0\n        };\n    }\n    /**\n   * Get cache size\n   */ get size() {\n        return this.cache.size;\n    }\n    constructor(defaultTTL = 5 * 60 * 1000, maxSize = 1000){\n        this.cache = new Map();\n        this.stats = {\n            hits: 0,\n            misses: 0\n        };\n        this.defaultTTL = defaultTTL; // 5 minutes default\n        this.maxSize = maxSize;\n        this.currentVersion = 1;\n        // Periodic cleanup of expired entries\n        if (true) {\n            setInterval(()=>this.cleanup(), 60 * 1000); // Every minute\n        }\n    }\n}\n// Singleton instance\nconst cacheManager = new CacheManager();\n// Cache key builders for consistency\nconst CacheKeys = {\n    projects: ()=>'projects:all',\n    project: (id)=>\"project:\".concat(id),\n    projectTasks: (projectId)=>\"tasks:project:\".concat(projectId),\n    projectsByIds: (ids)=>\"projects:ids:\".concat(ids.sort().join(',')),\n    tasks: (projectIds)=>\"tasks:projects:\".concat(projectIds.sort().join(',')),\n    tasksByIds: (ids)=>\"tasks:ids:\".concat(ids.sort().join(',')),\n    users: ()=>'users:all',\n    user: (id)=>\"user:\".concat(id),\n    projectStatuses: (projectId)=>\"statuses:project:\".concat(projectId)\n};\n// Cache TTL presets (in milliseconds)\nconst CacheTTL = {\n    short: 30 * 1000,\n    medium: 5 * 60 * 1000,\n    long: 15 * 60 * 1000,\n    veryLong: 60 * 60 * 1000\n};\n/**\n * Cached fetch wrapper with stale-while-revalidate support\n */ async function cachedFetch(key, fetcher) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    const cached = cacheManager.get(key);\n    // Fresh cache hit\n    if (cached !== null && !cacheManager.isStale(key)) {\n        return cached;\n    }\n    // Stale-while-revalidate: return stale data and fetch in background\n    if (options.staleWhileRevalidate && cached !== null) {\n        // Return stale data immediately\n        const staleData = cached;\n        // Fetch fresh data in background\n        fetcher().then((freshData)=>{\n            cacheManager.set(key, freshData, options);\n        }).catch((err)=>{\n            console.warn('[Cache] Background revalidation failed:', err);\n        });\n        return staleData;\n    }\n    // Cache miss or expired: fetch fresh data\n    try {\n        const data = await fetcher();\n        cacheManager.set(key, data, options);\n        return data;\n    } catch (error) {\n        // If fetch fails but we have stale data, return it as fallback\n        if (cached !== null) {\n            console.warn('[Cache] Fetch failed, returning stale data:', error);\n            return cached;\n        }\n        throw error;\n    }\n}\n/**\n * Batch cache operations\n */ class BatchCacheOperation {\n    invalidate(key) {\n        this.operations.push(()=>cacheManager.invalidate(key));\n        return this;\n    }\n    invalidatePattern(pattern) {\n        this.operations.push(()=>cacheManager.invalidatePattern(pattern));\n        return this;\n    }\n    set(key, data, options) {\n        this.operations.push(()=>cacheManager.set(key, data, options));\n        return this;\n    }\n    execute() {\n        this.operations.forEach((op)=>op());\n        this.operations = [];\n    }\n    constructor(){\n        this.operations = [];\n    }\n}\nfunction batchCache() {\n    return new BatchCacheOperation();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/cache.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/cached-api.ts":
/*!*******************************!*\
  !*** ./src/lib/cached-api.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAllCaches: () => (/* binding */ clearAllCaches),\n/* harmony export */   getCacheStats: () => (/* binding */ getCacheStats),\n/* harmony export */   getCachedProject: () => (/* binding */ getCachedProject),\n/* harmony export */   getCachedProjectStatuses: () => (/* binding */ getCachedProjectStatuses),\n/* harmony export */   getCachedProjects: () => (/* binding */ getCachedProjects),\n/* harmony export */   getCachedTasksByProjectIds: () => (/* binding */ getCachedTasksByProjectIds),\n/* harmony export */   getCachedUsers: () => (/* binding */ getCachedUsers),\n/* harmony export */   invalidateAllProjectCaches: () => (/* binding */ invalidateAllProjectCaches),\n/* harmony export */   invalidateProjectCaches: () => (/* binding */ invalidateProjectCaches),\n/* harmony export */   invalidateTaskCaches: () => (/* binding */ invalidateTaskCaches),\n/* harmony export */   optimisticUpdateProject: () => (/* binding */ optimisticUpdateProject),\n/* harmony export */   optimisticUpdateTask: () => (/* binding */ optimisticUpdateTask),\n/* harmony export */   prefetchProjectData: () => (/* binding */ prefetchProjectData)\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(app-pages-browser)/./src/lib/api.ts\");\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache */ \"(app-pages-browser)/./src/lib/cache.ts\");\n/**\n * Cached API layer for OrchePlan\n * Wraps API calls with intelligent caching strategies\n */ \n\n/**\n * Get all projects with caching\n */ async function getCachedProjects() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const key = _cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.projects();\n    if (options.forceRefresh) {\n        _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.invalidate(key);\n    }\n    var _options_staleWhileRevalidate;\n    return (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(key, ()=>(0,_api__WEBPACK_IMPORTED_MODULE_0__.getProjects)(), {\n        ttl: _cache__WEBPACK_IMPORTED_MODULE_1__.CacheTTL.medium,\n        staleWhileRevalidate: (_options_staleWhileRevalidate = options.staleWhileRevalidate) !== null && _options_staleWhileRevalidate !== void 0 ? _options_staleWhileRevalidate : true\n    });\n}\n/**\n * Get single project with caching\n */ async function getCachedProject(projectId) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const key = _cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.project(projectId);\n    if (options.forceRefresh) {\n        _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.invalidate(key);\n    }\n    var _options_staleWhileRevalidate;\n    return (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(key, ()=>(0,_api__WEBPACK_IMPORTED_MODULE_0__.getProject)(projectId), {\n        ttl: _cache__WEBPACK_IMPORTED_MODULE_1__.CacheTTL.medium,\n        staleWhileRevalidate: (_options_staleWhileRevalidate = options.staleWhileRevalidate) !== null && _options_staleWhileRevalidate !== void 0 ? _options_staleWhileRevalidate : true\n    });\n}\n/**\n * Get users with caching\n */ async function getCachedUsers() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const key = _cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.users();\n    if (options.forceRefresh) {\n        _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.invalidate(key);\n    }\n    var _options_staleWhileRevalidate;\n    return (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(key, ()=>(0,_api__WEBPACK_IMPORTED_MODULE_0__.getUsers)(), {\n        ttl: _cache__WEBPACK_IMPORTED_MODULE_1__.CacheTTL.long,\n        staleWhileRevalidate: (_options_staleWhileRevalidate = options.staleWhileRevalidate) !== null && _options_staleWhileRevalidate !== void 0 ? _options_staleWhileRevalidate : true\n    });\n}\n/**\n * Get tasks by project IDs with caching\n */ async function getCachedTasksByProjectIds(projectIds) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const key = _cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.tasks(projectIds);\n    if (options.forceRefresh) {\n        _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.invalidate(key);\n    }\n    var _options_staleWhileRevalidate;\n    return (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(key, ()=>(0,_api__WEBPACK_IMPORTED_MODULE_0__.getTasksByProjectIds)(projectIds), {\n        ttl: _cache__WEBPACK_IMPORTED_MODULE_1__.CacheTTL.short,\n        staleWhileRevalidate: (_options_staleWhileRevalidate = options.staleWhileRevalidate) !== null && _options_staleWhileRevalidate !== void 0 ? _options_staleWhileRevalidate : true\n    });\n}\n/**\n * Get project statuses with caching\n */ async function getCachedProjectStatuses(projectId) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const key = _cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.projectStatuses(projectId);\n    if (options.forceRefresh) {\n        _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.invalidate(key);\n    }\n    return (0,_cache__WEBPACK_IMPORTED_MODULE_1__.cachedFetch)(key, ()=>(0,_api__WEBPACK_IMPORTED_MODULE_0__.getProjectStatuses)(projectId), {\n        ttl: _cache__WEBPACK_IMPORTED_MODULE_1__.CacheTTL.long\n    });\n}\n/**\n * Invalidate caches related to a project\n */ function invalidateProjectCaches(projectId) {\n    (0,_cache__WEBPACK_IMPORTED_MODULE_1__.batchCache)().invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.project(projectId)).invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.projectStatuses(projectId)).invalidatePattern(new RegExp(\"^tasks:project:\".concat(projectId, \"$\"))).invalidatePattern(new RegExp(\"^tasks:projects:.*\".concat(projectId, \".*\"))).invalidate(_cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.projects()) // Projects list might include this project\n    .execute();\n}\n/**\n * Invalidate caches related to a task\n */ function invalidateTaskCaches(task) {\n    (0,_cache__WEBPACK_IMPORTED_MODULE_1__.batchCache)().invalidatePattern(new RegExp(\"^tasks:project:\".concat(task.projectId, \"$\"))).invalidatePattern(new RegExp(\"^tasks:projects:.*\".concat(task.projectId, \".*\"))).execute();\n}\n/**\n * Invalidate all project-related caches\n */ function invalidateAllProjectCaches() {\n    (0,_cache__WEBPACK_IMPORTED_MODULE_1__.batchCache)().invalidatePattern(/^project:/).invalidatePattern(/^projects:/).invalidatePattern(/^tasks:/).invalidatePattern(/^statuses:/).execute();\n}\n/**\n * Optimistic cache update for task\n * Updates cache immediately before server confirmation\n */ function optimisticUpdateTask(updatedTask) {\n    // Update any cached task lists that contain this task\n    const projectId = updatedTask.projectId;\n    // Try to update cached task lists\n    const patterns = [\n        _cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.projectTasks(projectId),\n        new RegExp(\"^tasks:projects:.*\".concat(projectId, \".*\"))\n    ];\n    patterns.forEach((pattern)=>{\n        if (typeof pattern === 'string') {\n            const cached = _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.get(pattern);\n            if (cached) {\n                const updated = cached.map((t)=>t.id === updatedTask.id ? updatedTask : t);\n                _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.set(pattern, updated, {\n                    ttl: _cache__WEBPACK_IMPORTED_MODULE_1__.CacheTTL.short\n                });\n            }\n        } else {\n            // For regex patterns, we need to iterate through cache keys\n            // This is less efficient but necessary for pattern matching\n            const cacheKeys = Array.from(_cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.cache.keys());\n            for (const key of cacheKeys){\n                if (pattern.test(key)) {\n                    const cached = _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.get(key);\n                    if (cached) {\n                        const updated = cached.map((t)=>t.id === updatedTask.id ? updatedTask : t);\n                        _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.set(key, updated, {\n                            ttl: _cache__WEBPACK_IMPORTED_MODULE_1__.CacheTTL.short\n                        });\n                    }\n                }\n            }\n        }\n    });\n}\n/**\n * Optimistic cache update for project\n */ function optimisticUpdateProject(updatedProject) {\n    // Update single project cache\n    const key = _cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.project(updatedProject.id);\n    _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.set(key, updatedProject, {\n        ttl: _cache__WEBPACK_IMPORTED_MODULE_1__.CacheTTL.medium\n    });\n    // Update projects list cache if it exists\n    const projectsKey = _cache__WEBPACK_IMPORTED_MODULE_1__.CacheKeys.projects();\n    const cachedProjects = _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.get(projectsKey);\n    if (cachedProjects) {\n        const updateProjectInList = (projects)=>{\n            return projects.map((p)=>{\n                if (p.id === updatedProject.id) {\n                    return {\n                        ...updatedProject,\n                        subProjects: p.subProjects\n                    };\n                }\n                if (p.subProjects && p.subProjects.length > 0) {\n                    return {\n                        ...p,\n                        subProjects: updateProjectInList(p.subProjects)\n                    };\n                }\n                return p;\n            });\n        };\n        const updated = updateProjectInList(cachedProjects);\n        _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.set(projectsKey, updated, {\n            ttl: _cache__WEBPACK_IMPORTED_MODULE_1__.CacheTTL.medium\n        });\n    }\n}\n/**\n * Prefetch data for better UX\n */ async function prefetchProjectData(projectId) {\n    // Prefetch in parallel without blocking\n    Promise.all([\n        getCachedProject(projectId, {\n            staleWhileRevalidate: true\n        }),\n        getCachedProjectStatuses(projectId)\n    ]).catch((err)=>{\n        console.warn('[Cache] Prefetch failed:', err);\n    });\n}\n/**\n * Get cache statistics for debugging\n */ function getCacheStats() {\n    return _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.getStats();\n}\n/**\n * Clear all caches (useful for logout or manual refresh)\n */ function clearAllCaches() {\n    _cache__WEBPACK_IMPORTED_MODULE_1__.cacheManager.clear();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/cached-api.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/csrf.ts":
/*!*************************!*\
  !*** ./src/lib/csrf.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCsrfHeaders: () => (/* binding */ addCsrfHeaders),\n/* harmony export */   clearCsrfToken: () => (/* binding */ clearCsrfToken),\n/* harmony export */   getCsrfToken: () => (/* binding */ getCsrfToken)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ getCsrfToken,clearCsrfToken,addCsrfHeaders auto */ // CSRF token management for frontend\nlet cachedToken = null;\nlet tokenPromise = null;\nasync function getCsrfToken() {\n    // If we already have a cached token, return it\n    if (cachedToken) {\n        return cachedToken;\n    }\n    // If a request is already in progress, wait for it\n    if (tokenPromise) {\n        return tokenPromise;\n    }\n    // Start a new request for the token\n    tokenPromise = fetchCsrfToken();\n    try {\n        cachedToken = await tokenPromise;\n        return cachedToken;\n    } finally{\n        tokenPromise = null;\n    }\n}\nasync function fetchCsrfToken() {\n    // Import API_BASE dynamically to avoid circular dependencies\n    const { getApiBase } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./api */ \"(app-pages-browser)/./src/lib/api.ts\"));\n    const API_BASE = getApiBase();\n    const response = await fetch(\"\".concat(API_BASE, \"/csrf-token\"), {\n        method: 'GET',\n        credentials: 'include'\n    });\n    if (!response.ok) {\n        throw new Error('Failed to fetch CSRF token');\n    }\n    const data = await response.json();\n    return data.csrfToken;\n}\nfunction clearCsrfToken() {\n    cachedToken = null;\n    tokenPromise = null;\n}\n// Utility to add CSRF token to request headers\nasync function addCsrfHeaders() {\n    let headers = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // Always add CSRF token for critical operations (backend requires it even in development)\n    try {\n        const token = await getCsrfToken();\n        headers['X-CSRF-Token'] = token;\n    } catch (error) {\n        console.warn('Failed to get CSRF token:', error);\n        // In production, this should fail the request\n        if (false) {}\n    }\n    return headers;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvY3NyZi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Z0dBRUEscUNBQXFDO0FBQ3JDLElBQUlBLGNBQTZCO0FBQ2pDLElBQUlDLGVBQXVDO0FBRXBDLGVBQWVDO0lBQ3BCLCtDQUErQztJQUMvQyxJQUFJRixhQUFhO1FBQ2YsT0FBT0E7SUFDVDtJQUVBLG1EQUFtRDtJQUNuRCxJQUFJQyxjQUFjO1FBQ2hCLE9BQU9BO0lBQ1Q7SUFFQSxvQ0FBb0M7SUFDcENBLGVBQWVFO0lBRWYsSUFBSTtRQUNGSCxjQUFjLE1BQU1DO1FBQ3BCLE9BQU9EO0lBQ1QsU0FBVTtRQUNSQyxlQUFlO0lBQ2pCO0FBQ0Y7QUFFQSxlQUFlRTtJQUNiLDZEQUE2RDtJQUM3RCxNQUFNLEVBQUVDLFVBQVUsRUFBRSxHQUFHLE1BQU0seUlBQWU7SUFDNUMsTUFBTUMsV0FBV0Q7SUFHakIsTUFBTUUsV0FBVyxNQUFNQyxNQUFNLEdBQVksT0FBVEYsVUFBUyxnQkFBYztRQUNyREcsUUFBUTtRQUNSQyxhQUFhO0lBQ2Y7SUFFQSxJQUFJLENBQUNILFNBQVNJLEVBQUUsRUFBRTtRQUNoQixNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQSxNQUFNQyxPQUFPLE1BQU1OLFNBQVNPLElBQUk7SUFDaEMsT0FBT0QsS0FBS0UsU0FBUztBQUN2QjtBQUVPLFNBQVNDO0lBQ2RmLGNBQWM7SUFDZEMsZUFBZTtBQUNqQjtBQUVBLCtDQUErQztBQUN4QyxlQUFlZTtRQUFlQyxVQUFBQSxpRUFBa0MsQ0FBQztJQUN0RSwwRkFBMEY7SUFDMUYsSUFBSTtRQUNGLE1BQU1DLFFBQVEsTUFBTWhCO1FBQ3BCZSxPQUFPLENBQUMsZUFBZSxHQUFHQztJQUM1QixFQUFFLE9BQU9DLE9BQU87UUFDZEMsUUFBUUMsSUFBSSxDQUFDLDZCQUE2QkY7UUFDMUMsOENBQThDO1FBQzlDLElBQUlHLEtBQXFDLEVBQUUsRUFFMUM7SUFDSDtJQUVBLE9BQU9MO0FBQ1QiLCJzb3VyY2VzIjpbIi9ob21lL2NvZGVyL09yY2hlUGxhbi9mcm9udGVuZC9zcmMvbGliL2NzcmYudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuLy8gQ1NSRiB0b2tlbiBtYW5hZ2VtZW50IGZvciBmcm9udGVuZFxubGV0IGNhY2hlZFRva2VuOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbmxldCB0b2tlblByb21pc2U6IFByb21pc2U8c3RyaW5nPiB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q3NyZlRva2VuKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIC8vIElmIHdlIGFscmVhZHkgaGF2ZSBhIGNhY2hlZCB0b2tlbiwgcmV0dXJuIGl0XG4gIGlmIChjYWNoZWRUb2tlbikge1xuICAgIHJldHVybiBjYWNoZWRUb2tlbjtcbiAgfVxuXG4gIC8vIElmIGEgcmVxdWVzdCBpcyBhbHJlYWR5IGluIHByb2dyZXNzLCB3YWl0IGZvciBpdFxuICBpZiAodG9rZW5Qcm9taXNlKSB7XG4gICAgcmV0dXJuIHRva2VuUHJvbWlzZTtcbiAgfVxuXG4gIC8vIFN0YXJ0IGEgbmV3IHJlcXVlc3QgZm9yIHRoZSB0b2tlblxuICB0b2tlblByb21pc2UgPSBmZXRjaENzcmZUb2tlbigpO1xuICBcbiAgdHJ5IHtcbiAgICBjYWNoZWRUb2tlbiA9IGF3YWl0IHRva2VuUHJvbWlzZTtcbiAgICByZXR1cm4gY2FjaGVkVG9rZW47XG4gIH0gZmluYWxseSB7XG4gICAgdG9rZW5Qcm9taXNlID0gbnVsbDtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaENzcmZUb2tlbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAvLyBJbXBvcnQgQVBJX0JBU0UgZHluYW1pY2FsbHkgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzXG4gIGNvbnN0IHsgZ2V0QXBpQmFzZSB9ID0gYXdhaXQgaW1wb3J0KCcuL2FwaScpO1xuICBjb25zdCBBUElfQkFTRSA9IGdldEFwaUJhc2UoKTtcbiAgXG4gIFxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFfS9jc3JmLXRva2VuYCwge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJywgLy8gSW5jbHVkZSBjb29raWVzXG4gIH0pO1xuXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBDU1JGIHRva2VuJyk7XG4gIH1cblxuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICByZXR1cm4gZGF0YS5jc3JmVG9rZW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNzcmZUb2tlbigpOiB2b2lkIHtcbiAgY2FjaGVkVG9rZW4gPSBudWxsO1xuICB0b2tlblByb21pc2UgPSBudWxsO1xufVxuXG4vLyBVdGlsaXR5IHRvIGFkZCBDU1JGIHRva2VuIHRvIHJlcXVlc3QgaGVhZGVyc1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZENzcmZIZWFkZXJzKGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fSk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4ge1xuICAvLyBBbHdheXMgYWRkIENTUkYgdG9rZW4gZm9yIGNyaXRpY2FsIG9wZXJhdGlvbnMgKGJhY2tlbmQgcmVxdWlyZXMgaXQgZXZlbiBpbiBkZXZlbG9wbWVudClcbiAgdHJ5IHtcbiAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGdldENzcmZUb2tlbigpO1xuICAgIGhlYWRlcnNbJ1gtQ1NSRi1Ub2tlbiddID0gdG9rZW47XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gZ2V0IENTUkYgdG9rZW46JywgZXJyb3IpO1xuICAgIC8vIEluIHByb2R1Y3Rpb24sIHRoaXMgc2hvdWxkIGZhaWwgdGhlIHJlcXVlc3RcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gaGVhZGVycztcbn0iXSwibmFtZXMiOlsiY2FjaGVkVG9rZW4iLCJ0b2tlblByb21pc2UiLCJnZXRDc3JmVG9rZW4iLCJmZXRjaENzcmZUb2tlbiIsImdldEFwaUJhc2UiLCJBUElfQkFTRSIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJjcmVkZW50aWFscyIsIm9rIiwiRXJyb3IiLCJkYXRhIiwianNvbiIsImNzcmZUb2tlbiIsImNsZWFyQ3NyZlRva2VuIiwiYWRkQ3NyZkhlYWRlcnMiLCJoZWFkZXJzIiwidG9rZW4iLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwicHJvY2VzcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/csrf.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/logger.ts":
/*!***************************!*\
  !*** ./src/lib/logger.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createComponentLogger: () => (/* binding */ createComponentLogger),\n/* harmony export */   generateCorrelationId: () => (/* binding */ generateCorrelationId),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   measureTime: () => (/* binding */ measureTime),\n/* harmony export */   measureTimeAsync: () => (/* binding */ measureTimeAsync)\n/* harmony export */ });\n// Centralized logging utility for frontend\nclass EnhancedLogger {\n    formatMessage(level, message, context) {\n        const timestamp = new Date().toISOString();\n        const mergedContext = {\n            ...this.globalContext,\n            ...this.parentContext,\n            ...context\n        };\n        let prefix = \"[\".concat(level.toUpperCase(), \"] \").concat(timestamp);\n        // Add context information to prefix\n        if (mergedContext.component) {\n            prefix += \" [\".concat(mergedContext.component, \"]\");\n        }\n        if (mergedContext.userId) {\n            prefix += \" [User:\".concat(mergedContext.userId, \"]\");\n        }\n        if (mergedContext.projectId) {\n            prefix += \" [Project:\".concat(mergedContext.projectId, \"]\");\n        }\n        if (mergedContext.action) {\n            prefix += \" [\".concat(mergedContext.action, \"]\");\n        }\n        if (mergedContext.correlationId) {\n            prefix += \" [ID:\".concat(mergedContext.correlationId, \"]\");\n        }\n        return \"\".concat(prefix, \" \").concat(message);\n    }\n    log(level, message, context) {\n        for(var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++){\n            args[_key - 3] = arguments[_key];\n        }\n        const timestamp = new Date().toISOString();\n        // In production, only log warnings and errors\n        if (false) {}\n        // Safely merge context objects\n        const safeGlobalContext = this.globalContext || {};\n        const safeParentContext = this.parentContext || {};\n        const safeContext = context || {};\n        const mergedContext = {\n            ...safeGlobalContext,\n            ...safeParentContext,\n            ...safeContext\n        };\n        // Filter out undefined, null, and empty string values from context\n        const filteredContext = Object.fromEntries(Object.entries(mergedContext).filter((param)=>{\n            let [key, value] = param;\n            return value !== undefined && value !== null && value !== '';\n        }));\n        // Create log entry for buffer\n        const logEntry = {\n            level,\n            message,\n            timestamp,\n            context: filteredContext,\n            args: args.length > 0 ? args : undefined\n        };\n        // Add error details if present\n        if (args.length > 0 && args[0] instanceof Error) {\n            logEntry.error = {\n                name: args[0].name,\n                message: args[0].message,\n                stack: args[0].stack\n            };\n        }\n        // Add to buffer\n        this.addToBuffer(logEntry);\n        // Format message for console\n        const formattedMessage = this.formatMessage(level, message, filteredContext);\n        // Helper to check if context has meaningful content\n        const hasContext = Object.keys(filteredContext).length > 0;\n        // Console output based on level and environment\n        switch(level){\n            case 'debug':\n                if (this.isDevelopment) {\n                    if (hasContext) {}\n                }\n                break;\n            case 'info':\n                if (this.isDevelopment) {\n                    console.info(formattedMessage, ...args);\n                    if (hasContext) {\n                        console.info('Context:', filteredContext);\n                    }\n                }\n                break;\n            case 'warn':\n                console.warn(formattedMessage, ...args);\n                if (hasContext) {\n                    console.warn('Context:', filteredContext);\n                }\n                break;\n            case 'error':\n                console.error(formattedMessage, ...args);\n                if (hasContext) {\n                    console.error('Context:', filteredContext);\n                } else if (this.isDevelopment) {\n                // In development, show when context was intentionally omitted vs empty\n                }\n                // In development, also show stack trace for unexpected errors only\n                if (this.isDevelopment && args.length > 0) {\n                    args.forEach((arg)=>{\n                        if (arg instanceof Error && arg.stack && !arg.isExpected) {\n                            console.error('Stack trace:', arg.stack);\n                        }\n                    });\n                }\n                break;\n        }\n        // Send to external logging service in production\n        if (!this.isDevelopment && level === 'error') {\n            this.sendToExternalLogging(logEntry);\n        }\n    }\n    addToBuffer(entry) {\n        this.logBuffer.push(entry);\n        if (this.logBuffer.length > this.maxBufferSize) {\n            this.logBuffer.shift(); // Remove oldest entry\n        }\n    }\n    async sendToExternalLogging(entry) {\n        // This would integrate with external logging services like LogRocket, Sentry, etc.\n        // For now, just store in localStorage for debugging\n        try {\n            const existingLogs = JSON.parse(localStorage.getItem('orcheplan_error_logs') || '[]');\n            existingLogs.push(entry);\n            // Keep only last 50 error logs\n            if (existingLogs.length > 50) {\n                existingLogs.splice(0, existingLogs.length - 50);\n            }\n            localStorage.setItem('orcheplan_error_logs', JSON.stringify(existingLogs));\n        } catch (e) {\n        // Ignore localStorage errors\n        }\n    }\n    debug(message, context) {\n        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            args[_key - 2] = arguments[_key];\n        }\n        this.log('debug', message, context, ...args);\n    }\n    info(message, context) {\n        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            args[_key - 2] = arguments[_key];\n        }\n        this.log('info', message, context, ...args);\n    }\n    warn(message, context) {\n        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            args[_key - 2] = arguments[_key];\n        }\n        this.log('warn', message, context, ...args);\n    }\n    error(message, context) {\n        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            args[_key - 2] = arguments[_key];\n        }\n        this.log('error', message, context, ...args);\n    }\n    setContext(context) {\n        this.globalContext = {\n            ...this.globalContext,\n            ...context\n        };\n        return this;\n    }\n    withContext(context) {\n        return new EnhancedLogger({\n            ...this.parentContext,\n            ...context\n        });\n    }\n    // Get recent logs for debugging\n    getRecentLogs() {\n        return [\n            ...this.logBuffer\n        ];\n    }\n    // Clear log buffer\n    clearLogs() {\n        this.logBuffer = [];\n    }\n    // Export logs for debugging\n    exportLogs() {\n        return JSON.stringify(this.logBuffer, null, 2);\n    }\n    constructor(parentContext = {}){\n        this.parentContext = parentContext;\n        this.isDevelopment = \"development\" === 'development';\n        this.globalContext = {};\n        this.logBuffer = [];\n        this.maxBufferSize = 100;\n    }\n}\n// Create singleton logger instance\nconst logger = new EnhancedLogger();\n// Helper function to generate correlation IDs\nfunction generateCorrelationId() {\n    return \"\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n}\n// Helper function to create component-specific loggers\nfunction createComponentLogger(componentName) {\n    return logger.withContext({\n        component: componentName\n    });\n}\n// Helper function to measure execution time\nfunction measureTime(operation, fn, context) {\n    const start = performance.now();\n    const correlationId = generateCorrelationId();\n    const componentLogger = logger.withContext({\n        ...context,\n        correlationId\n    });\n    componentLogger.debug(\"Starting \".concat(operation));\n    try {\n        const result = fn();\n        const duration = performance.now() - start;\n        componentLogger.info(\"Completed \".concat(operation), {\n            duration: \"\".concat(duration.toFixed(2), \"ms\")\n        });\n        return result;\n    } catch (error) {\n        const duration = performance.now() - start;\n        componentLogger.error(\"Failed \".concat(operation), {\n            duration: \"\".concat(duration.toFixed(2), \"ms\")\n        }, error);\n        throw error;\n    }\n}\n// Helper function to measure async execution time\nasync function measureTimeAsync(operation, fn, context) {\n    const start = performance.now();\n    const correlationId = generateCorrelationId();\n    const componentLogger = logger.withContext({\n        ...context,\n        correlationId\n    });\n    componentLogger.debug(\"Starting \".concat(operation));\n    try {\n        const result = await fn();\n        const duration = performance.now() - start;\n        componentLogger.info(\"Completed \".concat(operation), {\n            duration: \"\".concat(duration.toFixed(2), \"ms\")\n        });\n        return result;\n    } catch (error) {\n        const duration = performance.now() - start;\n        componentLogger.error(\"Failed \".concat(operation), {\n            duration: \"\".concat(duration.toFixed(2), \"ms\")\n        }, error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/logger.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/realtime.ts":
/*!*****************************!*\
  !*** ./src/lib/realtime.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Frontend SSE client for real-time updates\nclass RealtimeClient {\n    // Connect to SSE endpoint\n    connect() {\n        // If connection has failed before, don't try again\n        if (this.connectionFailed) {\n            return;\n        }\n        if (this.eventSource) {\n            this.disconnect();\n        }\n        try {\n            const url = \"\".concat(this.baseUrl, \"/realtime/events\");\n            // Try fetch-based approach first for better error handling\n            this.connectWithFetch(url);\n        } catch (error) {\n            console.warn('[SSE] Error creating EventSource - SSE not available:', error);\n            this.connectionFailed = true;\n            this.emit('connection_failed', {\n                reason: 'creation_error'\n            });\n        }\n    }\n    // Alternative SSE connection using fetch for better compatibility\n    async connectWithFetch(url) {\n        try {\n            const response = await fetch(url, {\n                credentials: 'include',\n                headers: {\n                    'Accept': 'text/event-stream',\n                    'Cache-Control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"SSE connection failed: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            if (!response.body) {\n                throw new Error('No response body for SSE stream');\n            }\n            this.isConnected = true;\n            this.reconnectAttempts = 0;\n            this.connectionFailed = false;\n            // Use ReadableStream to process SSE data\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n            let buffer = '';\n            const processStream = async ()=>{\n                try {\n                    while(true){\n                        const { done, value } = await reader.read();\n                        if (done) {\n                            this.handleDisconnect();\n                            break;\n                        }\n                        buffer += decoder.decode(value, {\n                            stream: true\n                        });\n                        // Process complete messages\n                        const lines = buffer.split('\\n');\n                        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n                        for (const line of lines){\n                            if (line.startsWith('data: ')) {\n                                try {\n                                    const data = JSON.parse(line.slice(6));\n                                    this.handleMessage(data);\n                                } catch (error) {\n                                    console.error('[SSE] Error parsing message:', error);\n                                }\n                            }\n                        }\n                    }\n                } catch (error) {\n                    console.error('[SSE] Stream processing error:', error);\n                    this.handleDisconnect();\n                }\n            };\n            processStream();\n        } catch (error) {\n            console.warn('[SSE] Fetch-based connection failed, trying EventSource...', error);\n            this.connectWithEventSource(url);\n        }\n    }\n    // Fallback to standard EventSource\n    connectWithEventSource(url) {\n        try {\n            this.eventSource = new EventSource(url, {\n                withCredentials: true\n            });\n            this.eventSource.onopen = ()=>{\n                this.isConnected = true;\n                this.reconnectAttempts = 0;\n                this.reconnectDelay = 1000;\n                this.connectionFailed = false;\n            };\n            this.eventSource.onmessage = (event)=>{\n                try {\n                    const data = JSON.parse(event.data);\n                    this.handleMessage(data);\n                } catch (error) {\n                    console.error('[SSE] Error parsing EventSource message:', error);\n                }\n            };\n            this.eventSource.onerror = (error)=>{\n                console.warn('[SSE] EventSource error:', error);\n                this.handleDisconnect();\n            };\n        } catch (error) {\n            console.error('[SSE] EventSource creation failed:', error);\n            this.connectionFailed = true;\n            this.emit('connection_failed', {\n                reason: 'eventsource_error'\n            });\n        }\n    }\n    // Handle disconnection and reconnection logic\n    handleDisconnect() {\n        console.warn('[SSE] Connection lost');\n        this.isConnected = false;\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            setTimeout(()=>{\n                this.reconnectAttempts++;\n                this.reconnectDelay *= 2;\n                this.connect();\n            }, this.reconnectDelay);\n        } else {\n            this.connectionFailed = true;\n            this.disconnect();\n            this.emit('connection_failed', {\n                reason: 'max_attempts_reached'\n            });\n        }\n    }\n    // Disconnect from SSE\n    disconnect() {\n        if (this.eventSource) {\n            this.eventSource.close();\n            this.eventSource = null;\n            this.isConnected = false;\n        }\n    }\n    // Handle incoming messages\n    handleMessage(data) {\n        switch(data.type){\n            case 'connected':\n                break;\n            case 'heartbeat':\n                break;\n            case 'task_update':\n                this.emit('task_update', data);\n                break;\n            case 'project_update':\n                this.emit('project_update', data);\n                break;\n            case 'status_update':\n                this.emit('status_update', data);\n                break;\n            default:\n        }\n    }\n    // Add event listener\n    on(event, callback) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n        this.listeners.get(event).add(callback);\n    }\n    // Remove event listener\n    off(event, callback) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            eventListeners.delete(callback);\n        }\n    }\n    // Emit event to listeners\n    emit(event, data) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            eventListeners.forEach((callback)=>{\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(\"[SSE] Error in event listener for \".concat(event, \":\"), error);\n                }\n            });\n        }\n    }\n    // Check if connected\n    getConnectionStatus() {\n        return this.isConnected;\n    }\n    // Check if connection has permanently failed\n    hasConnectionFailed() {\n        return this.connectionFailed;\n    }\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n        this.eventSource = null;\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 3; // Reduced from 5 to fail faster\n        this.reconnectDelay = 1000; // Start with 1 second\n        this.isConnected = false;\n        this.listeners = new Map();\n        this.connectionFailed = false;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RealtimeClient);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/realtime.ts\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2Fhome%2Fcoder%2FOrchePlan%2Ffrontend%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);